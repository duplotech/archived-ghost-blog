{"db":[{"meta":{"exported_on":1628278765632,"version":"009"},"data":{"posts":[{"id":2,"uuid":"41f464e5-b231-44f8-8b0b-13894c22a35c","title":"Sketches","slug":"sketches","markdown":"[![drawing-hands.jpg](https://d23f6h5jpj26xu.cloudfront.net/zlcudxsubuivoa_small.jpg)](http://img.svbtle.com/zlcudxsubuivoa.jpg)\n\nAs of today I am working on three projects. This wasn't intentional but it's very hard to avoid due to the ease of thinking things into existence within the software world.\n\nTo tell you the truth, I do not expect to finish them. Progress is slow and each is significant enough to require me to backtrack and re-envision the concepts over and over again.\n\nThat is why I have been drawing sketches.\n\n_________________________________\n\n# <a name=\"observe\"></a>Observe\n\n[Functional programming](https://en.wikipedia.org/wiki/Tacit_programming) in JavaScript is difficult to debug because it is difficult to observe.\n\n[JavaScript's dynamic typing](https://en.wikipedia.org/?title=JavaScript#Dynamic) means it is possible to write code that calls a function with the wrong data, and if this happens within a lengthy or complex functional pipeline it can be very hard to infer which function or construction is to blame for an error.\n\n[![ramda-mysterious-error-650-107.png](https://d23f6h5jpj26xu.cloudfront.net/sxcdcf1wdvqpyq_small.png)](http://img.svbtle.com/sxcdcf1wdvqpyq.png)\n\nA solution to this might be the usage of a library that can add type definitions to the language such as [TypeScript](http://www.typescriptlang.org/) or [Flow](http://flowtype.org/). However this seems against the spirit of the original language, and I believe a more fitting approach lies in ideas discussed in [Bret Victor's *Learnable Programming*](http://worrydream.com/LearnableProgramming/). \n\nWith that in mind, I wrote [an early prototype, **ramda-debug**, to visualise the runtime states of a functional pipeline](http://github.com/sebinsua/ramda-debug).\n\n[![ramda-debug-example.png](https://d23f6h5jpj26xu.cloudfront.net/8m9psbmtkedfw_small.png)](http://img.svbtle.com/8m9psbmtkedfw.png)\n\nI like to imagine future versions of this library will not concern themselves with logging, but instead emit events that can be handled by clients such as [Atom's Hydrogen](https://atom.io/packages/hydrogen) (perhaps through interfacing with [Jupyter](https://jupyter.org/), or by working directly with a debugger).\n\nThese runtime-produced events could eventually help to afford the creation of new kinds of visual debugging experiences that break-free from established debugging norms - for example, [visually highlighting a failed call stack, within a directed graph of function calls](https://twitter.com/sebinsua/status/606762029400113152).\n\n# <a name=\"orient\"></a>Orient\n\nBack in December 2013, I wrote [that \"the majority of software interfaces are broken\"](https://twitter.com/sebinsua/status/412984350926307328). I speculated that while there is an explicit mapping between a URI and a request handler, the one-to-many mappings between responses and response handlers necessitate the usage of broad, multi-purpose server responses, the result of a one-size-fits-all approach to client's needs.\n\nMy final thought was:\n\n> \"A man walks towards a door to a building which has a hole instead of a door handle. The man removes a door handle from his pocket which he screws in. The door opens. [By analogy] a response should encode a response handler's method signature.\"\n\nA few months passed and [a few of these ideas birthed **jstruct**](https://github.com/sebinsua/jstruct).\n\n[![jstruct-example.png](https://d23f6h5jpj26xu.cloudfront.net/jhqrliow1ejjaq_small.png)](http://img.svbtle.com/jhqrliow1ejjaq.png)\n\nJstruct allows quick and easy JSON transformations through the use of a declarative JSON DSL.\n\nThis does not itself provide a solution, however it does provide the first piece of one.\n\n[In the future I believe that a small middleware could be implemented](https://github.com/sebinsua/jstruct/issues/12) that would pass the response expected by a client from within `req.body` to a transformation function. This would ensure that clients could explicitly define what they wish to receive from a server.\n\nRecently [Facebook created a project with a very similar goal called GraphQL](https://facebook.github.io/react/blog/2015/05/01/graphql-introduction.html). My approach differs in that (1) I probably won't have the time to finish it, (2) it would be JSON-first and therefore easy to parse, (3) when calling the data transformation function, I would separate the definition of the request from the definition of the expected response, and (4) by default, I have a preference towards not using custom libraries for each data store that must be supported.\n\n# <a name=\"decide\"></a>Decide\n\nDespite my intent to keep each of the projects small, I probably only have energy and resources to complete just one.\n\nThe benefit of small projects is that you are able to very quickly release initial versions. On the other hand, with bigger and often more rewarding projects the cost of the first version could be months of full-time work.\n\nLast year I worked on such a project. I decided to take a break from it towards the end of the year, and the smaller projects of early 2015 were ultimately attempts to keep myself ticking until I regained perspective and focus with which to return to it.\n\nI now plan to redevelop the ideas and work that composed the larger project. If [last year is anything to go by](http://i.imgur.com/KHutk4t.png), it will be all consuming.\n\n# <a name=\"act\"></a>Act\n\nOver the past few years, I have become very interested in modern social technology and in particular the ways it can make interactions vastly cheaper and therefore easier to game.\n\nI believe that it can be argued that cheap connection isn't always quality connection, and that anything that tends towards creating social atomisation is harmful.\n\nMy hope, however, is that it might be possible to create technology to afford *good peopling*.\n\nThat is, I believe it's very important that we think about what *tools that could help people form bottom-up communities for mutually beneficial intellectual, emotional or economic trade* would look like. And so [this is what I've been doing](https://twitter.com/sebinsua/status/610422122985443328).\n\n[![spokes-vibe.jpg](https://d23f6h5jpj26xu.cloudfront.net/nemgpjjik9nunw_small.jpg)](http://img.svbtle.com/nemgpjjik9nunw.jpg)\n\nLast year I began work on a prototype of [a tool to help form small, helpful communities of well-differentiated people](http://spokesapp.co). The sentiment behind this was somewhat [echoed by a piece that later appeared in VentureBeat](http://venturebeat.com/2015/05/31/how-tech-is-leading-us-back-to-a-village-style-life/) and its [aim was to create small communities of less than 150 people](http://ranprieur.com/essays/beyondciv.html).\n\nWhen I last worked on the project it was on an alpha of the iOS app. Since then some APIs that I was using have been revoked, however despite this a decent amount of work has already been achieved.\n\nTomorrow I start work on it again. I'm happy for anybody interested in creating tools like this to get involved. I'm interested in taking all of the ideas apart to see them with a fresh perspective.\n\nAfter all, these projects might all be sketches, but they are sketches that I care deeply about.","html":"<p><a href=\"http://img.svbtle.com/zlcudxsubuivoa.jpg\"><img src=\"https://d23f6h5jpj26xu.cloudfront.net/zlcudxsubuivoa_small.jpg\" alt=\"drawing-hands.jpg\" title=\"\" /></a></p>\n\n<p>As of today I am working on three projects. This wasn't intentional but it's very hard to avoid due to the ease of thinking things into existence within the software world.</p>\n\n<p>To tell you the truth, I do not expect to finish them. Progress is slow and each is significant enough to require me to backtrack and re-envision the concepts over and over again.</p>\n\n<p>That is why I have been drawing sketches.</p>\n\n<hr />\n\n<h1 id=\"anameobserveaobserve\"><a name=\"observe\"></a>Observe</h1>\n\n<p><a href=\"https://en.wikipedia.org/wiki/Tacit_programming\">Functional programming</a> in JavaScript is difficult to debug because it is difficult to observe.</p>\n\n<p><a href=\"https://en.wikipedia.org/?title=JavaScript#Dynamic\">JavaScript's dynamic typing</a> means it is possible to write code that calls a function with the wrong data, and if this happens within a lengthy or complex functional pipeline it can be very hard to infer which function or construction is to blame for an error.</p>\n\n<p><a href=\"http://img.svbtle.com/sxcdcf1wdvqpyq.png\"><img src=\"https://d23f6h5jpj26xu.cloudfront.net/sxcdcf1wdvqpyq_small.png\" alt=\"ramda-mysterious-error-650-107.png\" title=\"\" /></a></p>\n\n<p>A solution to this might be the usage of a library that can add type definitions to the language such as <a href=\"http://www.typescriptlang.org/\">TypeScript</a> or <a href=\"http://flowtype.org/\">Flow</a>. However this seems against the spirit of the original language, and I believe a more fitting approach lies in ideas discussed in <a href=\"http://worrydream.com/LearnableProgramming/\">Bret Victor's <em>Learnable Programming</em></a>. </p>\n\n<p>With that in mind, I wrote <a href=\"http://github.com/sebinsua/ramda-debug\">an early prototype, <strong>ramda-debug</strong>, to visualise the runtime states of a functional pipeline</a>.</p>\n\n<p><a href=\"http://img.svbtle.com/8m9psbmtkedfw.png\"><img src=\"https://d23f6h5jpj26xu.cloudfront.net/8m9psbmtkedfw_small.png\" alt=\"ramda-debug-example.png\" title=\"\" /></a></p>\n\n<p>I like to imagine future versions of this library will not concern themselves with logging, but instead emit events that can be handled by clients such as <a href=\"https://atom.io/packages/hydrogen\">Atom's Hydrogen</a> (perhaps through interfacing with <a href=\"https://jupyter.org/\">Jupyter</a>, or by working directly with a debugger).</p>\n\n<p>These runtime-produced events could eventually help to afford the creation of new kinds of visual debugging experiences that break-free from established debugging norms - for example, <a href=\"https://twitter.com/sebinsua/status/606762029400113152\">visually highlighting a failed call stack, within a directed graph of function calls</a>.</p>\n\n<h1 id=\"anameorientaorient\"><a name=\"orient\"></a>Orient</h1>\n\n<p>Back in December 2013, I wrote <a href=\"https://twitter.com/sebinsua/status/412984350926307328\">that \"the majority of software interfaces are broken\"</a>. I speculated that while there is an explicit mapping between a URI and a request handler, the one-to-many mappings between responses and response handlers necessitate the usage of broad, multi-purpose server responses, the result of a one-size-fits-all approach to client's needs.</p>\n\n<p>My final thought was:</p>\n\n<blockquote>\n  <p>\"A man walks towards a door to a building which has a hole instead of a door handle. The man removes a door handle from his pocket which he screws in. The door opens. [By analogy] a response should encode a response handler's method signature.\"</p>\n</blockquote>\n\n<p>A few months passed and <a href=\"https://github.com/sebinsua/jstruct\">a few of these ideas birthed <strong>jstruct</strong></a>.</p>\n\n<p><a href=\"http://img.svbtle.com/jhqrliow1ejjaq.png\"><img src=\"https://d23f6h5jpj26xu.cloudfront.net/jhqrliow1ejjaq_small.png\" alt=\"jstruct-example.png\" title=\"\" /></a></p>\n\n<p>Jstruct allows quick and easy JSON transformations through the use of a declarative JSON DSL.</p>\n\n<p>This does not itself provide a solution, however it does provide the first piece of one.</p>\n\n<p><a href=\"https://github.com/sebinsua/jstruct/issues/12\">In the future I believe that a small middleware could be implemented</a> that would pass the response expected by a client from within <code>req.body</code> to a transformation function. This would ensure that clients could explicitly define what they wish to receive from a server.</p>\n\n<p>Recently <a href=\"https://facebook.github.io/react/blog/2015/05/01/graphql-introduction.html\">Facebook created a project with a very similar goal called GraphQL</a>. My approach differs in that (1) I probably won't have the time to finish it, (2) it would be JSON-first and therefore easy to parse, (3) when calling the data transformation function, I would separate the definition of the request from the definition of the expected response, and (4) by default, I have a preference towards not using custom libraries for each data store that must be supported.</p>\n\n<h1 id=\"anamedecideadecide\"><a name=\"decide\"></a>Decide</h1>\n\n<p>Despite my intent to keep each of the projects small, I probably only have energy and resources to complete just one.</p>\n\n<p>The benefit of small projects is that you are able to very quickly release initial versions. On the other hand, with bigger and often more rewarding projects the cost of the first version could be months of full-time work.</p>\n\n<p>Last year I worked on such a project. I decided to take a break from it towards the end of the year, and the smaller projects of early 2015 were ultimately attempts to keep myself ticking until I regained perspective and focus with which to return to it.</p>\n\n<p>I now plan to redevelop the ideas and work that composed the larger project. If <a href=\"http://i.imgur.com/KHutk4t.png\">last year is anything to go by</a>, it will be all consuming.</p>\n\n<h1 id=\"anameactaact\"><a name=\"act\"></a>Act</h1>\n\n<p>Over the past few years, I have become very interested in modern social technology and in particular the ways it can make interactions vastly cheaper and therefore easier to game.</p>\n\n<p>I believe that it can be argued that cheap connection isn't always quality connection, and that anything that tends towards creating social atomisation is harmful.</p>\n\n<p>My hope, however, is that it might be possible to create technology to afford <em>good peopling</em>.</p>\n\n<p>That is, I believe it's very important that we think about what <em>tools that could help people form bottom-up communities for mutually beneficial intellectual, emotional or economic trade</em> would look like. And so <a href=\"https://twitter.com/sebinsua/status/610422122985443328\">this is what I've been doing</a>.</p>\n\n<p><a href=\"http://img.svbtle.com/nemgpjjik9nunw.jpg\"><img src=\"https://d23f6h5jpj26xu.cloudfront.net/nemgpjjik9nunw_small.jpg\" alt=\"spokes-vibe.jpg\" title=\"\" /></a></p>\n\n<p>Last year I began work on a prototype of <a href=\"http://spokesapp.co\">a tool to help form small, helpful communities of well-differentiated people</a>. The sentiment behind this was somewhat <a href=\"http://venturebeat.com/2015/05/31/how-tech-is-leading-us-back-to-a-village-style-life/\">echoed by a piece that later appeared in VentureBeat</a> and its <a href=\"http://ranprieur.com/essays/beyondciv.html\">aim was to create small communities of less than 150 people</a>.</p>\n\n<p>When I last worked on the project it was on an alpha of the iOS app. Since then some APIs that I was using have been revoked, however despite this a decent amount of work has already been achieved.</p>\n\n<p>Tomorrow I start work on it again. I'm happy for anybody interested in creating tools like this to get involved. I'm interested in taking all of the ideas apart to see them with a fresh perspective.</p>\n\n<p>After all, these projects might all be sketches, but they are sketches that I care deeply about.</p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"2016-02-02 00:31:07","created_by":1,"updated_at":"2016-02-02 00:33:18","updated_by":1,"published_at":"2015-06-20 23:00:00","published_by":1,"visibility":"public","mobiledoc":null,"amp":null},{"id":3,"uuid":"be8e7ccb-4d95-4a61-9add-e711e2a325f6","title":"Opine","slug":"opine","markdown":"> \"A quote by a fancy intellectual that shows that the author is deeply serious about defending their opinions from internet passers-by and that cheap shots will not be effective.\"\n\nHave you ever felt sad about a perceived loss of freedom only to realise it might never have existed?\n\nBefore the New Year I searched for a direction that I might take in the coming year and decided that creating some transparency with regards to my work and intentions would be a productive use of my time. Unfortunately, a short while after this thought, I felt the pang.\n\n*I fear writing.*\n\nIt's not just me. When I look around, few gather the willpower and courage to write and even fewer are willing to risk their reputations on their own ideas and opinions.\n\nThose that do write through pseudonyms or with a pretentious obfuscation. Or, by channeling popular or sacred opinions, they risk nothing and say little about what they really believe. Some of the more adept don't just imitate others but parasite their own messages into already trusted host messages thereby getting through other's mental defences.\n\nPartly I feel this way because writing is in general hard, however it strikes me that writing articles on unorthodox ideas and opinions is in fact harder than it should be. The reason being is that opinions are commonly treated with contempt and are thought to be deserving of scorn due to their subjectivity particularly when compared to facts.\n\n______________________\n\nThe other week I read [\"How You Know\" by Paul Graham](http://paulgraham.com/know.html). One section stuck out at me.\n\n> A few months ago, as I was reading Constance Reid's excellent biography of Hilbert, I figured out if not the answer to this question, at least something that made me feel better about it. She writes:\n> > Hilbert had no patience with mathematical lectures which filled the students with facts but did not teach them how to frame a problem and solve it. He often used to tell them that \"a perfect formulation of a problem is already half its solution.\"\n>\n\nNow I enjoyed that article and it is an opinion that I agree with, but it says a lot to me that in order to write his opinion on this he felt that he would need to find a famous, well-thought-of dead guy to back him up.\n\nHow can it be that, in an article in which the author openly admits that they do not know exactly where all of their ideas come from, they still feel obliged to quote prior authors before they are free to to present their opinions?\n\nLikewise, Shane Parrish recently wrote an article in which he argued his personal opinion [that you are not even entitled to hold an opinion until you can argue better against yourself than others can](http://www.farnamstreetblog.com/2013/04/the-work-required-to-have-an-opinion) and during this felt the need to invoke both [Charlie Munger](http://www.amazon.co.uk/Seeking-Wisdom-Darwin-Munger-Edition/dp/1578644283) and [Li Lu](http://en.wikipedia.org/wiki/Li_Lu).\n\nNeither of those opinions are dependent on facts, yet in both it seems that the authors thought it necessary to shore up confidence in readers by name-dropping high-status authors.\n\n______________________\n\n**Why is this happening?**\n\nThere are several reasons that I can currently think of for why people might do this.\n\n*It's possible that I'm in a bubble and that others do not see this, but if this is the case the points I make should at least be applicable to the people in my bubble.*\n\n1. Many of us are brought up with education systems that expect a certain amount of deference to past thinkers from us. This could either take the form of a habit, or of conscious signalling of respect for the academic establishment.\n\n2. Quoting the right people could serve as an in-group test and help to maintain a group's exclusivity.\n\n3. Ill-feeling towards opinions could be leftovers from the days previous to the internet affording everybody with a space to publish and the right to broadcast. A time when idea space was scarcer and/or more sacred.\n\n4. Authors are defending themselves against the possibility that rogue commentators will see the opinions they write as opportunities to score cheap status by claiming that the writer is not being rigorous enough. Quoting is a relatively cheap signal of the author's willingness to defend their opinion.\n\n5. Authors have realised that there are certain properties of an opinion piece that can increase its truthiness, and are wilfully modifying their writing to manipulate others into believing that what they say is *true*.\n\n6. Authors are consciously deciding that in order to broaden the market reach of their opinions, they should try to curry favour from readers by signalling their allegiances to famous writers.\n\n______________________\n\n[![Crest](https://d23f6h5jpj26xu.cloudfront.net/hnrtjqo1wuvkxw_small.png)](http://img.svbtle.com/hnrtjqo1wuvkxw.png)\n\nOpinions are simply too expensive. This is a shame because new perspectives are frequently very valuable.\n\nI don't see why it should be this way.\n\nYou can have a new idea at any point of a day. This isn't hard at all. What's costly and slow is fretting about how deeply you wish to be exposed to them, before finally sitting down to track down references that you can appropriate and stitch together in order that you can give people the illusion they were conceived from a conversation with the past.\n\nIt might seem like I'm [denigrating the importance of canon](http://chronicle.com/article/What-We-Lose-if-We-Lose-the/150991/) or deprecating the importance of facts. But I'm not: this is simply a recommendation that you [strip away all of the deep-sounding nonsense](https://www.mtholyoke.edu/acad/intrel/orwell46.htm) and let the reader decide whether what remains is true or false. \n\nRequiring proof from others that new ideas and opinions are true also isn't sensible. It biases people into acting dishonestly by connoting their opinions with high-status canon, and causes you to you lose the opportunities for knowledge and learning that will come from letting other people explore your ideas (correct and incorrect).\n\nLastly, reconstructing your ideas after you've come up with them by frankensteining other people's ideas together is a barrier to finding their most intuitive, beautiful form.\n\n___________\n\nFree-minded communities ought to unburden themselves from the tax of requiring new ideas to be stitched into the quilt-like fabric of our culture. We should protect the ease in which people can publish their own ideas and stay clear of practices that might unduly cause them to conform to preconceived ones.\n\nAs most opinions and ideas are transient, with those that are unpopular culled by the passing of time, we shouldn't be so wary about releasing them into the wild.\n\nIn short, we should write as if we are speaking to friends, not searching for validation. We can still hat tip those that come before us or inform readers with facts when appropriate.\n\nLikewise, when reading what others write [we should judge them in good faith](http://en.wikipedia.org/wiki/Principle_of_charity). After all, ultimately it's solely our responsibility to take their opinion and decide whether it is useful, pointless or destructive to us.","html":"<blockquote>\n  <p>\"A quote by a fancy intellectual that shows that the author is deeply serious about defending their opinions from internet passers-by and that cheap shots will not be effective.\"</p>\n</blockquote>\n\n<p>Have you ever felt sad about a perceived loss of freedom only to realise it might never have existed?</p>\n\n<p>Before the New Year I searched for a direction that I might take in the coming year and decided that creating some transparency with regards to my work and intentions would be a productive use of my time. Unfortunately, a short while after this thought, I felt the pang.</p>\n\n<p><em>I fear writing.</em></p>\n\n<p>It's not just me. When I look around, few gather the willpower and courage to write and even fewer are willing to risk their reputations on their own ideas and opinions.</p>\n\n<p>Those that do write through pseudonyms or with a pretentious obfuscation. Or, by channeling popular or sacred opinions, they risk nothing and say little about what they really believe. Some of the more adept don't just imitate others but parasite their own messages into already trusted host messages thereby getting through other's mental defences.</p>\n\n<p>Partly I feel this way because writing is in general hard, however it strikes me that writing articles on unorthodox ideas and opinions is in fact harder than it should be. The reason being is that opinions are commonly treated with contempt and are thought to be deserving of scorn due to their subjectivity particularly when compared to facts.</p>\n\n<hr />\n\n<p>The other week I read <a href=\"http://paulgraham.com/know.html\">\"How You Know\" by Paul Graham</a>. One section stuck out at me.</p>\n\n<blockquote>\n  <p>A few months ago, as I was reading Constance Reid's excellent biography of Hilbert, I figured out if not the answer to this question, at least something that made me feel better about it. She writes:</p>\n  \n  <blockquote>\n    <p>Hilbert had no patience with mathematical lectures which filled the students with facts but did not teach them how to frame a problem and solve it. He often used to tell them that \"a perfect formulation of a problem is already half its solution.\"</p>\n  </blockquote>\n</blockquote>\n\n<p>Now I enjoyed that article and it is an opinion that I agree with, but it says a lot to me that in order to write his opinion on this he felt that he would need to find a famous, well-thought-of dead guy to back him up.</p>\n\n<p>How can it be that, in an article in which the author openly admits that they do not know exactly where all of their ideas come from, they still feel obliged to quote prior authors before they are free to to present their opinions?</p>\n\n<p>Likewise, Shane Parrish recently wrote an article in which he argued his personal opinion <a href=\"http://www.farnamstreetblog.com/2013/04/the-work-required-to-have-an-opinion\">that you are not even entitled to hold an opinion until you can argue better against yourself than others can</a> and during this felt the need to invoke both <a href=\"http://www.amazon.co.uk/Seeking-Wisdom-Darwin-Munger-Edition/dp/1578644283\">Charlie Munger</a> and <a href=\"http://en.wikipedia.org/wiki/Li_Lu\">Li Lu</a>.</p>\n\n<p>Neither of those opinions are dependent on facts, yet in both it seems that the authors thought it necessary to shore up confidence in readers by name-dropping high-status authors.</p>\n\n<hr />\n\n<p><strong>Why is this happening?</strong></p>\n\n<p>There are several reasons that I can currently think of for why people might do this.</p>\n\n<p><em>It's possible that I'm in a bubble and that others do not see this, but if this is the case the points I make should at least be applicable to the people in my bubble.</em></p>\n\n<ol>\n<li><p>Many of us are brought up with education systems that expect a certain amount of deference to past thinkers from us. This could either take the form of a habit, or of conscious signalling of respect for the academic establishment.</p></li>\n<li><p>Quoting the right people could serve as an in-group test and help to maintain a group's exclusivity.</p></li>\n<li><p>Ill-feeling towards opinions could be leftovers from the days previous to the internet affording everybody with a space to publish and the right to broadcast. A time when idea space was scarcer and/or more sacred.</p></li>\n<li><p>Authors are defending themselves against the possibility that rogue commentators will see the opinions they write as opportunities to score cheap status by claiming that the writer is not being rigorous enough. Quoting is a relatively cheap signal of the author's willingness to defend their opinion.</p></li>\n<li><p>Authors have realised that there are certain properties of an opinion piece that can increase its truthiness, and are wilfully modifying their writing to manipulate others into believing that what they say is <em>true</em>.</p></li>\n<li><p>Authors are consciously deciding that in order to broaden the market reach of their opinions, they should try to curry favour from readers by signalling their allegiances to famous writers.</p></li>\n</ol>\n\n<hr />\n\n<p><a href=\"http://img.svbtle.com/hnrtjqo1wuvkxw.png\"><img src=\"https://d23f6h5jpj26xu.cloudfront.net/hnrtjqo1wuvkxw_small.png\" alt=\"Crest\" title=\"\" /></a></p>\n\n<p>Opinions are simply too expensive. This is a shame because new perspectives are frequently very valuable.</p>\n\n<p>I don't see why it should be this way.</p>\n\n<p>You can have a new idea at any point of a day. This isn't hard at all. What's costly and slow is fretting about how deeply you wish to be exposed to them, before finally sitting down to track down references that you can appropriate and stitch together in order that you can give people the illusion they were conceived from a conversation with the past.</p>\n\n<p>It might seem like I'm <a href=\"http://chronicle.com/article/What-We-Lose-if-We-Lose-the/150991/\">denigrating the importance of canon</a> or deprecating the importance of facts. But I'm not: this is simply a recommendation that you <a href=\"https://www.mtholyoke.edu/acad/intrel/orwell46.htm\">strip away all of the deep-sounding nonsense</a> and let the reader decide whether what remains is true or false. </p>\n\n<p>Requiring proof from others that new ideas and opinions are true also isn't sensible. It biases people into acting dishonestly by connoting their opinions with high-status canon, and causes you to you lose the opportunities for knowledge and learning that will come from letting other people explore your ideas (correct and incorrect).</p>\n\n<p>Lastly, reconstructing your ideas after you've come up with them by frankensteining other people's ideas together is a barrier to finding their most intuitive, beautiful form.</p>\n\n<hr />\n\n<p>Free-minded communities ought to unburden themselves from the tax of requiring new ideas to be stitched into the quilt-like fabric of our culture. We should protect the ease in which people can publish their own ideas and stay clear of practices that might unduly cause them to conform to preconceived ones.</p>\n\n<p>As most opinions and ideas are transient, with those that are unpopular culled by the passing of time, we shouldn't be so wary about releasing them into the wild.</p>\n\n<p>In short, we should write as if we are speaking to friends, not searching for validation. We can still hat tip those that come before us or inform readers with facts when appropriate.</p>\n\n<p>Likewise, when reading what others write <a href=\"http://en.wikipedia.org/wiki/Principle_of_charity\">we should judge them in good faith</a>. After all, ultimately it's solely our responsibility to take their opinion and decide whether it is useful, pointless or destructive to us.</p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"2016-02-02 00:35:32","created_by":1,"updated_at":"2016-02-02 02:17:06","updated_by":1,"published_at":"2015-01-07 16:28:00","published_by":1,"visibility":"public","mobiledoc":null,"amp":null},{"id":4,"uuid":"a535d7dc-70fc-4de8-b2a8-97e9e8aad3e8","title":"How to install Keen IO Analytics into your Node.JS apps in mere seconds","slug":"how-to-install-analytics-into-your-nodejs-apps-in-mere-seconds","markdown":"*This was written as [a guest blog post for Keen IO](https://keen.io/blog/78561215787/how-to-install-keen-io-analytics-into-your-node-js-app).*\n\n*[Those that want to cut to the chase, should go and take a look at the project on Github here](https://github.com/sebinsua/express-keenio).*\n\n**Have you ever found yourself putting off adding analytics until an app reaches its later stages of development and you're less busy?**\n\nI think this is a mistake we all fall into all too often. In a highly competitive ecosystem, users will sometimes be with you on launch and gone the week after. By waiting too long, we can lose our one chance to study early user behaviour so it's very important that we take every opportunity we can to understand how they interact with the service while they're around.\n\nBut we also shouldn’t be wasting valuable development time installing analytics either. Surely installation should be a quick and simple process leaving you time free to work on the features that truly differentiate your product.\n\n---\n\n[Keen IO](http://keen.io) is an analytics platform for people that realise that off-the-shelf solutions often trap you into thinking about and analysing data in cookie-cutter ways, and that want an edge in *finding that one particular insight* that might make all the difference to a business.\n\n**What if it were possible to future-proof your analytics needs, while also getting the benefits of quick and easy installation?**\n\nI've made the [Express.JS middleware express-keenio](http://github.com/sebinsua/express-keenio) to help make this happen. \n\nInstallation of analytics is now a 15-second process.\n\nJust look how easy it is:\n\n```\nvar express = require(\"express\"),\n    keenio = require('express-keenio').configure({ client: { projectId: '', writeKey: ''} });\n\nvar app = express();\n\napp.post('/payments', keenio.trackRoute('payments',  { body: ['userId', 'itemId', 'type', 'quantity', 'price'], reaction: [] }), function (req, res) {\n  // Your code creating 'data' goes here.\n  res.json(data);\n});\n\napp.listen(3000);\n```\n\nA few lines of code, and your app (whether it's an MVP, a source of passive income, a side-project, or something you're making at a hackathon) will immediately begin capturing analytics data.\n\nLater on, as your understanding and usage of analytics grows, an extensive configuration system allows you to adjust and restrict the middleware's behaviour however you please, with whitelists and blacklists, as well as options to control many other aspects of its operation. The Github [README](http://github.com/sebinsua/express-keenio) has everything you need to know.\n\n---\n\n**Philosophy**\n\nIf you’re not [defining events on an individual basis](https://keen.io/blog/53958349217/analytics-for-hackers-how-to-think-about-event-data), it’s helpful to come up with an underlying philosophy to event creation that holds true for a large number of user interactions.\n\nMy approach was to consider an event to be a crystallised interaction and describe it as [a mapping between an intention and a reaction](http://sebinsua.com/interfaces-as-loops), a rough analogue to an HTTP request and response. The only other information required to define useful events was coming up with some way of binding them to identities (metadata such as a user's IP address, or information such as email and username) and other forms of contextual environment metadata (such as the user agent.)\n\n---\n\n**The first release of [express-keenio can be found on Github here.](http://github.com/sebinsua/express-keenio)**\n\nI welcome any feedback, issues to report, or pull requests you may have. It has been tested, but use some caution when installing it, as I can not guarantee that it is production-ready quite yet.\n\n---\n\n**[You should follow me on twitter here.](http://twitter.com/sebinsua)**","html":"<p><em>This was written as <a href=\"https://keen.io/blog/78561215787/how-to-install-keen-io-analytics-into-your-node-js-app\">a guest blog post for Keen IO</a>.</em></p>\n\n<p><em><a href=\"https://github.com/sebinsua/express-keenio\">Those that want to cut to the chase, should go and take a look at the project on Github here</a>.</em></p>\n\n<p><strong>Have you ever found yourself putting off adding analytics until an app reaches its later stages of development and you're less busy?</strong></p>\n\n<p>I think this is a mistake we all fall into all too often. In a highly competitive ecosystem, users will sometimes be with you on launch and gone the week after. By waiting too long, we can lose our one chance to study early user behaviour so it's very important that we take every opportunity we can to understand how they interact with the service while they're around.</p>\n\n<p>But we also shouldn’t be wasting valuable development time installing analytics either. Surely installation should be a quick and simple process leaving you time free to work on the features that truly differentiate your product.</p>\n\n<hr />\n\n<p><a href=\"http://keen.io\">Keen IO</a> is an analytics platform for people that realise that off-the-shelf solutions often trap you into thinking about and analysing data in cookie-cutter ways, and that want an edge in <em>finding that one particular insight</em> that might make all the difference to a business.</p>\n\n<p><strong>What if it were possible to future-proof your analytics needs, while also getting the benefits of quick and easy installation?</strong></p>\n\n<p>I've made the <a href=\"http://github.com/sebinsua/express-keenio\">Express.JS middleware express-keenio</a> to help make this happen. </p>\n\n<p>Installation of analytics is now a 15-second process.</p>\n\n<p>Just look how easy it is:</p>\n\n<pre><code>var express = require(\"express\"),  \n    keenio = require('express-keenio').configure({ client: { projectId: '', writeKey: ''} });\n\nvar app = express();\n\napp.post('/payments', keenio.trackRoute('payments',  { body: ['userId', 'itemId', 'type', 'quantity', 'price'], reaction: [] }), function (req, res) {  \n  // Your code creating 'data' goes here.\n  res.json(data);\n});\n\napp.listen(3000);  \n</code></pre>\n\n<p>A few lines of code, and your app (whether it's an MVP, a source of passive income, a side-project, or something you're making at a hackathon) will immediately begin capturing analytics data.</p>\n\n<p>Later on, as your understanding and usage of analytics grows, an extensive configuration system allows you to adjust and restrict the middleware's behaviour however you please, with whitelists and blacklists, as well as options to control many other aspects of its operation. The Github <a href=\"http://github.com/sebinsua/express-keenio\">README</a> has everything you need to know.</p>\n\n<hr />\n\n<p><strong>Philosophy</strong></p>\n\n<p>If you’re not <a href=\"https://keen.io/blog/53958349217/analytics-for-hackers-how-to-think-about-event-data\">defining events on an individual basis</a>, it’s helpful to come up with an underlying philosophy to event creation that holds true for a large number of user interactions.</p>\n\n<p>My approach was to consider an event to be a crystallised interaction and describe it as <a href=\"http://sebinsua.com/interfaces-as-loops\">a mapping between an intention and a reaction</a>, a rough analogue to an HTTP request and response. The only other information required to define useful events was coming up with some way of binding them to identities (metadata such as a user's IP address, or information such as email and username) and other forms of contextual environment metadata (such as the user agent.)</p>\n\n<hr />\n\n<p><strong>The first release of <a href=\"http://github.com/sebinsua/express-keenio\">express-keenio can be found on Github here.</a></strong></p>\n\n<p>I welcome any feedback, issues to report, or pull requests you may have. It has been tested, but use some caution when installing it, as I can not guarantee that it is production-ready quite yet.</p>\n\n<hr />\n\n<p><strong><a href=\"http://twitter.com/sebinsua\">You should follow me on twitter here.</a></strong></p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"2016-02-02 00:39:35","created_by":1,"updated_at":"2016-02-02 00:43:56","updated_by":1,"published_at":"2014-03-05 07:38:00","published_by":1,"visibility":"public","mobiledoc":null,"amp":null},{"id":5,"uuid":"09f8edfc-192c-43bb-acb2-1f13ecec03e5","title":"Interfaces as Loops","slug":"interfaces-as-loops","markdown":"I had an experience the other day that transformed my thoughts on interfaces and I'd like to share it. I believe that not enough of us understand what an interface really is and that this is hampering our ability to provide good user experience.\n\nOne of the problems we have when answering the question \"What is an interface?\" is that we don't have an accurate representation of what an interface looks like. There is a tendency for us to become confused and pick just one concrete instance of an interface that we know well, leading to responses like \"Oh, you mean a GUI\" or for those that have read books like [\"The Design Of Everyday Things\"](http://www.amazon.co.uk/Design-Everyday-Things-Donald-Norman/dp/0262640376) something more physical like a door handle.\n\nLike many people in the tech industry I've become acquainted with a small subset of interfaces known as GUIs and this has largely controlled the frame in which I recognise and understand interfaces.\n\nSo, like you, when I think of an interface I normally think of this:\n\n[![uber-main-screen-turn-on.png](https://d23f6h5jpj26xu.cloudfront.net/luhartnrdplx7w_small.png)](http://img.svbtle.com/luhartnrdplx7w.png)\n\nAnd not this:\n\n[![uber-cars-waiting.jpg](https://d23f6h5jpj26xu.cloudfront.net/bmfwffwc7lotqg_small.jpg)](http://img.svbtle.com/bmfwffwc7lotqg.jpg)\n\nPerhaps you're wondering why I've shown you a street full of cars and called it an interface. What is the use in that?\n\n**Empathising.**\n\nTo illustrate what I mean, I'm going to talk about [Uber](https://www.uber.com/) for a little bit. \n\nUber is an app company that aims to connect stranded city-dwellers with a driver on-the-go. \n\nA user opens the app, sets their pickup location, and requests a vehicle.\n\nThen they wait.\n\n---\n\nThe other day on a particularly cold and rainy night I undertook this ritual, putting my phone back into my pocket as I waited for the 5-10 minutes it takes a driver to arrive.\n\nSo there I was, staring into the dark, wet street waiting for my car to arrive. As it drew close, I received a notification from Uber in the form of a vibration/text message and reached into my pocket to retrieve my phone. \n\n**The Interface.**\n\n[![phone-is-locked-uber-interface.png](https://d23f6h5jpj26xu.cloudfront.net/y8tqxiuj84i4q_small.png)](http://img.svbtle.com/y8tqxiuj84i4q.png)\n\nYour natural inclination might be to think that I'm not currently interfaced with Uber because I do not have their app on screen. However this is something I fundamentally disagree with.\n\n> **interface**\n> \n> ˈɪntəfeɪs/\n> \n> *noun*\n> \n> \n> 1. a point where two systems, subjects, organizations, etc. meet and interact.\n\nRecall that the problem that Uber is trying to solve is that of connecting people to drivers.\n\nThat is the core interface: a connection between a person and a driver.\n\nSo I'm standing in a busy street with a message from Uber telling me that somewhere in front of me is a car. And as of yet I don’t know precisely where it is or how to differentiate it from other vehicles, so I need information to recognise it such as its make, colour and number plate.\n\nThis information that urges a user to interact in the right way exists under a bit of umbrella terminology known as a “perceived affordance”.\n\nThe word \"affordance\" was created by the psychologist J. J. Gibson to refer to actionable properties between the world and an actor (e.g. person). To Gibson, affordances were relationships. Later on this word was introduced to Design by the famous usability engineer, Don Norman. He also prefixed it with an additional word “perceived”, as he felt that while an object might have many affordances it’s important to distinguish between those that are easily perceived and those that are not, in order that designers might bias perceptions towards particular affordances.\n\nIn order to find the information necessary to continue the interaction, I need to unlock my phone and re-open the Uber app. I believe there's an opportunity here to ease the interaction between user and driver. If we consider the app to be a sub-interface existing in relation to a larger interface between the user and the driver we can begin to notice other easier to perceive sub-interfaces which exist alongside it. A perfect example is the text message that notified me of the driver's arrival.\n\nThe text message can be used to give the information required to quickly and easily identify and search for the driver.\n\n> \"Hi Seb, your Uber is arriving now!\" \n\nCould become\n\n> \"Hi Seb, your Uber is arriving now! Look out for the silver BMW with the number plate K50 WTB.\"\n\nAlmost all notifications can be considered a place to inject actionable interfacing information into a user's head.\n\nThis isn't the only affordance that could be used. Other car companies are incidentally also using their own perceived affordances.\n\n[![lyfts-affordance.jpg](https://d23f6h5jpj26xu.cloudfront.net/0vnjgrkwpnlgq_small.jpg)](http://img.svbtle.com/0vnjgrkwpnlgq.jpg)\n\nThat's a competitor called [Lyft](http://lyft.com). Lyft handed out \"carstaches\" to their drivers. This is being hailed as a branding and marketing exercise which it is a great example of, but it is also a perceived affordance which lets you quickly identify your lyft.\n\n**So what does an Interface look like?**\n\nTo me the term interface describes a conduit between a person and a resource that a designer might bias towards particular user experiences with the use of perceived affordances.\n\nIf I was to visualise the mental model I have of an interface I would draw a loop that connects your head to a resource.\n\n[![interfaces-as-loops.png](https://d23f6h5jpj26xu.cloudfront.net/uuig8l3li2mzq_small.png)](http://img.svbtle.com/uuig8l3li2mzq.png)\n\nTechnology is rapidly allowing us to interface with the world in new and profound ways. We shouldn’t let old notions of what an interface is dictate to us how we interact with the world. We must always remember that user experience is a function of who and where we are.\n\nInterfaces start in your head.\n\n----\n\n**[You should follow me on twitter here.](http://twitter.com/sebinsua)**","html":"<p>I had an experience the other day that transformed my thoughts on interfaces and I'd like to share it. I believe that not enough of us understand what an interface really is and that this is hampering our ability to provide good user experience.</p>\n\n<p>One of the problems we have when answering the question \"What is an interface?\" is that we don't have an accurate representation of what an interface looks like. There is a tendency for us to become confused and pick just one concrete instance of an interface that we know well, leading to responses like \"Oh, you mean a GUI\" or for those that have read books like <a href=\"http://www.amazon.co.uk/Design-Everyday-Things-Donald-Norman/dp/0262640376\">\"The Design Of Everyday Things\"</a> something more physical like a door handle.</p>\n\n<p>Like many people in the tech industry I've become acquainted with a small subset of interfaces known as GUIs and this has largely controlled the frame in which I recognise and understand interfaces.</p>\n\n<p>So, like you, when I think of an interface I normally think of this:</p>\n\n<p><a href=\"http://img.svbtle.com/luhartnrdplx7w.png\"><img src=\"https://d23f6h5jpj26xu.cloudfront.net/luhartnrdplx7w_small.png\" alt=\"uber-main-screen-turn-on.png\" title=\"\" /></a></p>\n\n<p>And not this:</p>\n\n<p><a href=\"http://img.svbtle.com/bmfwffwc7lotqg.jpg\"><img src=\"https://d23f6h5jpj26xu.cloudfront.net/bmfwffwc7lotqg_small.jpg\" alt=\"uber-cars-waiting.jpg\" title=\"\" /></a></p>\n\n<p>Perhaps you're wondering why I've shown you a street full of cars and called it an interface. What is the use in that?</p>\n\n<p><strong>Empathising.</strong></p>\n\n<p>To illustrate what I mean, I'm going to talk about <a href=\"https://www.uber.com/\">Uber</a> for a little bit. </p>\n\n<p>Uber is an app company that aims to connect stranded city-dwellers with a driver on-the-go. </p>\n\n<p>A user opens the app, sets their pickup location, and requests a vehicle.</p>\n\n<p>Then they wait.</p>\n\n<hr />\n\n<p>The other day on a particularly cold and rainy night I undertook this ritual, putting my phone back into my pocket as I waited for the 5-10 minutes it takes a driver to arrive.</p>\n\n<p>So there I was, staring into the dark, wet street waiting for my car to arrive. As it drew close, I received a notification from Uber in the form of a vibration/text message and reached into my pocket to retrieve my phone. </p>\n\n<p><strong>The Interface.</strong></p>\n\n<p><a href=\"http://img.svbtle.com/y8tqxiuj84i4q.png\"><img src=\"https://d23f6h5jpj26xu.cloudfront.net/y8tqxiuj84i4q_small.png\" alt=\"phone-is-locked-uber-interface.png\" title=\"\" /></a></p>\n\n<p>Your natural inclination might be to think that I'm not currently interfaced with Uber because I do not have their app on screen. However this is something I fundamentally disagree with.</p>\n\n<blockquote>\n  <p><strong>interface</strong></p>\n  \n  <p>ˈɪntəfeɪs/</p>\n  \n  <p><em>noun</em></p>\n  \n  <ol>\n  <li>a point where two systems, subjects, organizations, etc. meet and interact.</li>\n  </ol>\n</blockquote>\n\n<p>Recall that the problem that Uber is trying to solve is that of connecting people to drivers.</p>\n\n<p>That is the core interface: a connection between a person and a driver.</p>\n\n<p>So I'm standing in a busy street with a message from Uber telling me that somewhere in front of me is a car. And as of yet I don’t know precisely where it is or how to differentiate it from other vehicles, so I need information to recognise it such as its make, colour and number plate.</p>\n\n<p>This information that urges a user to interact in the right way exists under a bit of umbrella terminology known as a “perceived affordance”.</p>\n\n<p>The word \"affordance\" was created by the psychologist J. J. Gibson to refer to actionable properties between the world and an actor (e.g. person). To Gibson, affordances were relationships. Later on this word was introduced to Design by the famous usability engineer, Don Norman. He also prefixed it with an additional word “perceived”, as he felt that while an object might have many affordances it’s important to distinguish between those that are easily perceived and those that are not, in order that designers might bias perceptions towards particular affordances.</p>\n\n<p>In order to find the information necessary to continue the interaction, I need to unlock my phone and re-open the Uber app. I believe there's an opportunity here to ease the interaction between user and driver. If we consider the app to be a sub-interface existing in relation to a larger interface between the user and the driver we can begin to notice other easier to perceive sub-interfaces which exist alongside it. A perfect example is the text message that notified me of the driver's arrival.</p>\n\n<p>The text message can be used to give the information required to quickly and easily identify and search for the driver.</p>\n\n<blockquote>\n  <p>\"Hi Seb, your Uber is arriving now!\" </p>\n</blockquote>\n\n<p>Could become</p>\n\n<blockquote>\n  <p>\"Hi Seb, your Uber is arriving now! Look out for the silver BMW with the number plate K50 WTB.\"</p>\n</blockquote>\n\n<p>Almost all notifications can be considered a place to inject actionable interfacing information into a user's head.</p>\n\n<p>This isn't the only affordance that could be used. Other car companies are incidentally also using their own perceived affordances.</p>\n\n<p><a href=\"http://img.svbtle.com/0vnjgrkwpnlgq.jpg\"><img src=\"https://d23f6h5jpj26xu.cloudfront.net/0vnjgrkwpnlgq_small.jpg\" alt=\"lyfts-affordance.jpg\" title=\"\" /></a></p>\n\n<p>That's a competitor called <a href=\"http://lyft.com\">Lyft</a>. Lyft handed out \"carstaches\" to their drivers. This is being hailed as a branding and marketing exercise which it is a great example of, but it is also a perceived affordance which lets you quickly identify your lyft.</p>\n\n<p><strong>So what does an Interface look like?</strong></p>\n\n<p>To me the term interface describes a conduit between a person and a resource that a designer might bias towards particular user experiences with the use of perceived affordances.</p>\n\n<p>If I was to visualise the mental model I have of an interface I would draw a loop that connects your head to a resource.</p>\n\n<p><a href=\"http://img.svbtle.com/uuig8l3li2mzq.png\"><img src=\"https://d23f6h5jpj26xu.cloudfront.net/uuig8l3li2mzq_small.png\" alt=\"interfaces-as-loops.png\" title=\"\" /></a></p>\n\n<p>Technology is rapidly allowing us to interface with the world in new and profound ways. We shouldn’t let old notions of what an interface is dictate to us how we interact with the world. We must always remember that user experience is a function of who and where we are.</p>\n\n<p>Interfaces start in your head.</p>\n\n<hr />\n\n<p><strong><a href=\"http://twitter.com/sebinsua\">You should follow me on twitter here.</a></strong></p>","image":null,"featured":1,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"2016-02-02 00:40:51","created_by":1,"updated_at":"2016-02-02 00:58:54","updated_by":1,"published_at":"2014-02-11 05:45:00","published_by":1,"visibility":"public","mobiledoc":null,"amp":null},{"id":6,"uuid":"4d518c3e-3b2e-4967-9054-d39aa4940b55","title":"The Gestation Period","slug":"skin-in-the-game-vs-the-gestation-period","markdown":"I’ve been reading a lot of [Taleb](http://www.fooledbyrandomness.com/) recently, and one of the concepts which is repeated over and over again and that is proposed as a rule is of [\"skin in the game\"](http://www.youtube.com/watch?v=0Uc4DI-BF28). For those that haven’t heard of this before, the idea is that: we should not be protected from the downsides of natural volatility if others would be exposed to them otherwise - e.g. a cook should taste their own food as a preventive measure to giving others food poisoning (doing so makes them more careful than they would be otherwise.)\n\nWhile this concept is a good heuristic for trustworthiness it’s unlikely to survive evolution.\n\nSmall transactional costs stop things from existing at the fetal/growth stage. Evolution destroys them long before the long-term benefits demonstrate themselves as it supports short-term adaptive traits over long-term adaptive traits. If you require skin-in-the-game transactional costs then your transactions will happen far less often, and in the short-term you will get out-competed for resources by those that protect themselves with top-down regulations.\n\nIt is often difficult for third-parties to evaluate the authenticity of a cost or regulation, which is why institutional costs exist - they factor out hundreds of checks of hundreds of transactions into a single check of the institution that regulates hundreds of transactions (which itself is often proxied by the social proofing of this institution.) This lowers the transaction cost which causes high growth.\n\nFetal is really a good analogy here. The womb exists for good reason; scaffolds exist for good reason; decorum on first dates exists for good reason. Without these things early transactional costs defeat growth.\n\nIn short, skin-in-the-game evolves out of artificial systems as it is bad for early-growth. However this does not mean that it should; in well-designed/natural systems the entity first exists in a protective bubble during its gestation period and then slowly has its skin placed in the game.\n\n*This is currently a draft.*","html":"<p>I’ve been reading a lot of <a href=\"http://www.fooledbyrandomness.com/\">Taleb</a> recently, and one of the concepts which is repeated over and over again and that is proposed as a rule is of <a href=\"http://www.youtube.com/watch?v=0Uc4DI-BF28\">\"skin in the game\"</a>. For those that haven’t heard of this before, the idea is that: we should not be protected from the downsides of natural volatility if others would be exposed to them otherwise - e.g. a cook should taste their own food as a preventive measure to giving others food poisoning (doing so makes them more careful than they would be otherwise.)</p>\n\n<p>While this concept is a good heuristic for trustworthiness it’s unlikely to survive evolution.</p>\n\n<p>Small transactional costs stop things from existing at the fetal/growth stage. Evolution destroys them long before the long-term benefits demonstrate themselves as it supports short-term adaptive traits over long-term adaptive traits. If you require skin-in-the-game transactional costs then your transactions will happen far less often, and in the short-term you will get out-competed for resources by those that protect themselves with top-down regulations.</p>\n\n<p>It is often difficult for third-parties to evaluate the authenticity of a cost or regulation, which is why institutional costs exist - they factor out hundreds of checks of hundreds of transactions into a single check of the institution that regulates hundreds of transactions (which itself is often proxied by the social proofing of this institution.) This lowers the transaction cost which causes high growth.</p>\n\n<p>Fetal is really a good analogy here. The womb exists for good reason; scaffolds exist for good reason; decorum on first dates exists for good reason. Without these things early transactional costs defeat growth.</p>\n\n<p>In short, skin-in-the-game evolves out of artificial systems as it is bad for early-growth. However this does not mean that it should; in well-designed/natural systems the entity first exists in a protective bubble during its gestation period and then slowly has its skin placed in the game.</p>\n\n<p><em>This is currently a draft.</em></p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"2016-02-02 00:41:54","created_by":1,"updated_at":"2016-02-02 00:43:13","updated_by":1,"published_at":"2013-07-24 19:04:00","published_by":1,"visibility":"public","mobiledoc":null,"amp":null},{"id":7,"uuid":"af6652b7-a0e1-4148-8cc4-9d6db2dc711b","title":"On Facial Expressions","slug":"on-facial-expression","markdown":"As I traveled back from Belarus last week I glimpsed a photo of a gorilla in a magazine.\n\n[![D9gal.jpg](https://d23f6h5jpj26xu.cloudfront.net/b0kgdzkinncp1a_small.jpg)](http://img.svbtle.com/b0kgdzkinncp1a.jpg)\n\nI recognised the gorilla’s facial expression as one of anger, and noticed that we share a great deal of similarity with other primates in how we signal emotions through facial expressions. This got me thinking:\n\n01. **Why do we share facial expressions with other primates?**\n02. **How and why do emotions get communicated in facial expressions?**\n\n**Evolution**\n\nThe universality of facial expressions [1] was noted by Charles Darwin in his book \"The Expression of the Emotions in Man and Animals\". Darwin believed that expressions were innate in human nature, and as an anecdote he pointed out that the congenitally blind have similar facial expressions to other individuals. This was later supported by studies in the 1960s by Paul Ekman who found that apart from slight differences in facial morphology it was possible to apply a Facial Action Coding System [2] to evaluate many animals expressions. This strongly suggests that they could not have been learned, and instead may have evolved because they were signifiers of evolutionary fitness.\n\n*Adaptive function is normally given as the primary reason for the existence of shared facial expressions.* For example: the widened eyes and raising of the brow in the facial expression of fear or surprise increases the field of vision and the speed of moving the eyes which helps finding and following threats, while the wrinkled nose and mouth of the facial expression of disgust limit the intake of foul-smelling and possibly dangerous air and particles. Likewise, when angry, furrowing the brow prevents too much light from entering the eyes.\n\n**Bonding**\n\nAs well as expressions formed from adaptive functions, others such as the “eyebrow flashing” greeting ease social bonds. Another facial expression, the smile is commonly thought of as being derived from the submissive “fear grin”, although I believe it could have also arisen in status hierarchies to distinguish between the aggressive baring of teeth used externally and the more muted dominance required in intimate/familial group hierarchies. This is similar to how intimacy often requires vulnerability (e.g. back scratching, kissing, tickling, etc.)\n\n**Social Signalling**\n\n*Emotions get contained in facial expressions because we are conscious of their usual context.* For instance, just as a lion may bare its teeth, or a gorilla can puff out its chest and furrow its brow, a human when confronting another might mimic predatory facial expressions to evoke the fighting abilities of those animals in the minds of their opponent. These symbolic aggressive or dominant displays would then in turn cause unconscious fight or flight responses in other animals depending on the status hierarchies that they percieve themselves as belonging to. While this seems believable as a reason for shared facial expressions when you consider the symbolic meaning and role of animals in some tribal societies, due to the prevalence of similar facial expressions in less self-aware animals I think it is unlikely that it is the primary reason.\n\nAdditionally, a facial expression with an adaptive function can become more distinctive and exaggerated in order to fulfill a primarily socially communicative function in a social group. For example, an interesting form of signalling happens when a facial expression is used as a metaphor in a context in which it loses its adaptive function, such as how when concentrating or showing uncertainty we often squint as if trying to see something in greater detail.\n\n[![iJ7Fu.jpg](https://d23f6h5jpj26xu.cloudfront.net/g7fuudburfd0hg_small.jpg)](http://img.svbtle.com/g7fuudburfd0hg.jpg)\n\n**Conclusion**\n\nWe share facial expressions with a number of primates due to a series of reasons that likely evolved alongside our emotions. A cross-cultural consistency of the combinations of facial movements exists that make up expressions of “disgust,” “fear,” “joy,” “surprise,” “sadness,” and “anger” [3]. These expressions were premammal and primal or filial, while emotions like shame and pride evolved in group settings later on as a form of social signalling.\n\n[![VidSq.png](https://d23f6h5jpj26xu.cloudfront.net/rseymlwjpqqq2w_small.png)](http://img.svbtle.com/rseymlwjpqqq2w.png)\n\n[1] http://en.wikipedia.org/wiki/Facial_expression\n[2] http://en.wikipedia.org/wiki/Facial_Action_Coding_System\n[3] http://www.pitt.edu/~kschmidt/schmidtcohn01.pdf","html":"<p>As I traveled back from Belarus last week I glimpsed a photo of a gorilla in a magazine.</p>\n\n<p><a href=\"http://img.svbtle.com/b0kgdzkinncp1a.jpg\"><img src=\"https://d23f6h5jpj26xu.cloudfront.net/b0kgdzkinncp1a_small.jpg\" alt=\"D9gal.jpg\" title=\"\" /></a></p>\n\n<p>I recognised the gorilla’s facial expression as one of anger, and noticed that we share a great deal of similarity with other primates in how we signal emotions through facial expressions. This got me thinking:</p>\n\n<ol>\n<li><strong>Why do we share facial expressions with other primates?</strong>  </li>\n<li><strong>How and why do emotions get communicated in facial expressions?</strong></li>\n</ol>\n\n<p><strong>Evolution</strong></p>\n\n<p>The universality of facial expressions [1] was noted by Charles Darwin in his book \"The Expression of the Emotions in Man and Animals\". Darwin believed that expressions were innate in human nature, and as an anecdote he pointed out that the congenitally blind have similar facial expressions to other individuals. This was later supported by studies in the 1960s by Paul Ekman who found that apart from slight differences in facial morphology it was possible to apply a Facial Action Coding System [2] to evaluate many animals expressions. This strongly suggests that they could not have been learned, and instead may have evolved because they were signifiers of evolutionary fitness.</p>\n\n<p><em>Adaptive function is normally given as the primary reason for the existence of shared facial expressions.</em> For example: the widened eyes and raising of the brow in the facial expression of fear or surprise increases the field of vision and the speed of moving the eyes which helps finding and following threats, while the wrinkled nose and mouth of the facial expression of disgust limit the intake of foul-smelling and possibly dangerous air and particles. Likewise, when angry, furrowing the brow prevents too much light from entering the eyes.</p>\n\n<p><strong>Bonding</strong></p>\n\n<p>As well as expressions formed from adaptive functions, others such as the “eyebrow flashing” greeting ease social bonds. Another facial expression, the smile is commonly thought of as being derived from the submissive “fear grin”, although I believe it could have also arisen in status hierarchies to distinguish between the aggressive baring of teeth used externally and the more muted dominance required in intimate/familial group hierarchies. This is similar to how intimacy often requires vulnerability (e.g. back scratching, kissing, tickling, etc.)</p>\n\n<p><strong>Social Signalling</strong></p>\n\n<p><em>Emotions get contained in facial expressions because we are conscious of their usual context.</em> For instance, just as a lion may bare its teeth, or a gorilla can puff out its chest and furrow its brow, a human when confronting another might mimic predatory facial expressions to evoke the fighting abilities of those animals in the minds of their opponent. These symbolic aggressive or dominant displays would then in turn cause unconscious fight or flight responses in other animals depending on the status hierarchies that they percieve themselves as belonging to. While this seems believable as a reason for shared facial expressions when you consider the symbolic meaning and role of animals in some tribal societies, due to the prevalence of similar facial expressions in less self-aware animals I think it is unlikely that it is the primary reason.</p>\n\n<p>Additionally, a facial expression with an adaptive function can become more distinctive and exaggerated in order to fulfill a primarily socially communicative function in a social group. For example, an interesting form of signalling happens when a facial expression is used as a metaphor in a context in which it loses its adaptive function, such as how when concentrating or showing uncertainty we often squint as if trying to see something in greater detail.</p>\n\n<p><a href=\"http://img.svbtle.com/g7fuudburfd0hg.jpg\"><img src=\"https://d23f6h5jpj26xu.cloudfront.net/g7fuudburfd0hg_small.jpg\" alt=\"iJ7Fu.jpg\" title=\"\" /></a></p>\n\n<p><strong>Conclusion</strong></p>\n\n<p>We share facial expressions with a number of primates due to a series of reasons that likely evolved alongside our emotions. A cross-cultural consistency of the combinations of facial movements exists that make up expressions of “disgust,” “fear,” “joy,” “surprise,” “sadness,” and “anger” [3]. These expressions were premammal and primal or filial, while emotions like shame and pride evolved in group settings later on as a form of social signalling.</p>\n\n<p><a href=\"http://img.svbtle.com/rseymlwjpqqq2w.png\"><img src=\"https://d23f6h5jpj26xu.cloudfront.net/rseymlwjpqqq2w_small.png\" alt=\"VidSq.png\" title=\"\" /></a></p>\n\n<p>[1] <a href=\"http://en.wikipedia.org/wiki/Facial\">http://en.wikipedia.org/wiki/Facial</a><em>expression\n[2] <a href=\"http://en.wikipedia.org/wiki/Facial\">http://en.wikipedia.org/wiki/Facial</a></em>Action<em>Coding</em>System\n[3] <a href=\"http://www.pitt.edu/~kschmidt/schmidtcohn01.pdf\">http://www.pitt.edu/~kschmidt/schmidtcohn01.pdf</a></p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"2016-02-02 00:44:46","created_by":1,"updated_at":"2016-02-02 00:45:43","updated_by":1,"published_at":"2012-05-14 11:33:00","published_by":1,"visibility":"public","mobiledoc":null,"amp":null},{"id":8,"uuid":"ee6c1473-5eb2-482b-8046-b9389e1a8501","title":"Your thigh as an interface from your phone to your mind","slug":"your-thigh-as-an-interface-from-your-phone-to-your-mind","markdown":"**Modern smartphones still use 90s-era vibration technology.**\n\nLooking back mobile technology has improved a lot: the screen, the keypad, the internet connectivity, the OS; but do you remember the days when you felt your pocket vibrate and you knew somebody rung you or texted you?\n\nNowadays a vibration in your pocket could be an email, a tweet, a follow, a like, a new friend on facebook, etc. Your iPhone and Android are in a way even less user-friendly than your old Nokia. Often you need to take your phone out of your pocket to find out whether it’s a spam email in your inbox or a text from your significant other. You might check the settings and see that there is an option to choose different vibration patterns but is that really it?\n\nIn order to reduce unwanted distractions and to increase the usability of our devices we should ensure that the connection we have to a phone is not just audio and visual but also touch.\n\nPhone manufacturer’s could be using [multiple motors across the back of the phone to give a spatial quality](http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=4685314) or changing the pattern, speed or intensity of the vibration in a way that differentiates different communication. A message from your best friend should feel qualitatively different to you than one from a blocked number. We could have recognisable defaults. Then your phone would be a true extension to your body.","html":"<p><strong>Modern smartphones still use 90s-era vibration technology.</strong></p>\n\n<p>Looking back mobile technology has improved a lot: the screen, the keypad, the internet connectivity, the OS; but do you remember the days when you felt your pocket vibrate and you knew somebody rung you or texted you?</p>\n\n<p>Nowadays a vibration in your pocket could be an email, a tweet, a follow, a like, a new friend on facebook, etc. Your iPhone and Android are in a way even less user-friendly than your old Nokia. Often you need to take your phone out of your pocket to find out whether it’s a spam email in your inbox or a text from your significant other. You might check the settings and see that there is an option to choose different vibration patterns but is that really it?</p>\n\n<p>In order to reduce unwanted distractions and to increase the usability of our devices we should ensure that the connection we have to a phone is not just audio and visual but also touch.</p>\n\n<p>Phone manufacturer’s could be using <a href=\"http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=4685314\">multiple motors across the back of the phone to give a spatial quality</a> or changing the pattern, speed or intensity of the vibration in a way that differentiates different communication. A message from your best friend should feel qualitatively different to you than one from a blocked number. We could have recognisable defaults. Then your phone would be a true extension to your body.</p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"2016-02-02 00:46:16","created_by":1,"updated_at":"2016-02-02 00:46:59","updated_by":1,"published_at":"2012-09-25 09:23:00","published_by":1,"visibility":"public","mobiledoc":null,"amp":null},{"id":9,"uuid":"878230e7-31e9-4e83-ba7e-9e63d51df225","title":"How to TDD effectively","slug":"how-to-tdd-effectively","markdown":"*To new readers of my blog. This article was written many years ago, and is no longer the entirety or core of what I believe. It remains here as a historical stepping stone to newer ideas.*\n\n01. Understand the overall functional behaviour of the system you must implement. It’s sensible to understand this from the perspective of why (e.g. a customer’s need fulfilment). These behaviours are often represented as user stories or business requirements and are the result of business-driven planning.\n02. Distinguish different behavioural domains as components and then define the scope of each of these. The scope of each component should describe the behaviour it must implement in a standardized format or ubiquitous language that is well-understood by everybody involved in the project (BDD). This is the result of joint business/technical planning.\n03. Ensure that larger components are broken into more manageable sub-components that are simpler to reason about. This is the result of technical planning.\n04. As a developer, start at the smallest component and for each:\n    01. Carefully create a public interface [0]. Plan how to test each of these public methods [1] by writing documentation that explicitly describes each method’s usage and behaviour (defined at this point as: expected or unexpected responses) [2]. These are the things which you should think of:\n        01. What customer needs related to this were expressed in the ubiquitous language earlier?\n        02. How can it be used?\n        03. What behaviour does it provide?\n        04. What responses can it respond with and when?\n        05. What exceptions can be raised as a result of calling it and when?\n        06. What usage-behaviour mapping needs to exist for this behaviour to be represented and then tested?\n    02. Create tests for the interface previously created based on the documented behaviour, usage, responses, and errors. Until the methods of an interface are successfully implemented their tests will fail (TDD).\n    03. Implement the interfaces methods until they pass. (If an implementation requires growing the list of public methods contained by an interface then repeat the test planning process [3] for each of these.)\n    04. Check that business needs have been met as a result of the process.\n\n[0] It’s worth noting that when I say “interface” I mean this in a generalised form. I mean the way of interacting with the component. I do not mean a particular programming language’s “Interface” language construct.\n\n[1] We do not test private methods as they are implementation related and suspect to change often. However encapsulation is contextual. A public interface may be provided to other components in a system, yet there may be an underlying API that is private to external systems, but should be considered public to the components built on top of it — and therefore tested.\n\n[2] In Python it is possible to do this using the [doctest](http://docs.python.org/library/doctest.html) module.\n\n[3] ALWAYS use common sense.","html":"<p><em>To new readers of my blog. This article was written many years ago, and is no longer the entirety or core of what I believe. It remains here as a historical stepping stone to newer ideas.</em></p>\n\n<ol>\n<li>Understand the overall functional behaviour of the system you must implement. It’s sensible to understand this from the perspective of why (e.g. a customer’s need fulfilment). These behaviours are often represented as user stories or business requirements and are the result of business-driven planning.  </li>\n<li>Distinguish different behavioural domains as components and then define the scope of each of these. The scope of each component should describe the behaviour it must implement in a standardized format or ubiquitous language that is well-understood by everybody involved in the project (BDD). This is the result of joint business/technical planning.  </li>\n<li>Ensure that larger components are broken into more manageable sub-components that are simpler to reason about. This is the result of technical planning.  </li>\n<li>As a developer, start at the smallest component and for each: <br />\n<ol><li>Carefully create a public interface [0]. Plan how to test each of these public methods [1] by writing documentation that explicitly describes each method’s usage and behaviour (defined at this point as: expected or unexpected responses) [2]. These are the things which you should think of:\n<ol><li>What customer needs related to this were expressed in the ubiquitous language earlier?</li>\n<li>How can it be used?</li>\n<li>What behaviour does it provide?</li>\n<li>What responses can it respond with and when?</li>\n<li>What exceptions can be raised as a result of calling it and when?</li>\n<li>What usage-behaviour mapping needs to exist for this behaviour to be represented and then tested?</li></ol></li>\n<li>Create tests for the interface previously created based on the documented behaviour, usage, responses, and errors. Until the methods of an interface are successfully implemented their tests will fail (TDD).</li>\n<li>Implement the interfaces methods until they pass. (If an implementation requires growing the list of public methods contained by an interface then repeat the test planning process [3] for each of these.)</li>\n<li>Check that business needs have been met as a result of the process.</li></ol></li>\n</ol>\n\n<p>[0] It’s worth noting that when I say “interface” I mean this in a generalised form. I mean the way of interacting with the component. I do not mean a particular programming language’s “Interface” language construct.</p>\n\n<p>[1] We do not test private methods as they are implementation related and suspect to change often. However encapsulation is contextual. A public interface may be provided to other components in a system, yet there may be an underlying API that is private to external systems, but should be considered public to the components built on top of it — and therefore tested.</p>\n\n<p>[2] In Python it is possible to do this using the <a href=\"http://docs.python.org/library/doctest.html\">doctest</a> module.</p>\n\n<p>[3] ALWAYS use common sense.</p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"2016-02-02 00:47:36","created_by":1,"updated_at":"2016-02-02 00:48:07","updated_by":1,"published_at":"2012-05-13 11:38:00","published_by":1,"visibility":"public","mobiledoc":null,"amp":null},{"id":10,"uuid":"da536495-3e15-4893-bbc5-c9efae55eb26","title":"How To Think","slug":"how-to-think","markdown":"01. \"The map is not the territory.\" Be mindful of what is.\n02. Concentrate without distraction.\n03. Hold opinions without gripping them.\n04. \"Invert, always invert.\" Impose faces on reality and then ask them contentious questions. Interrogate topics from perspectives of distinct cultures, and reframe in diverse contexts.\n05. Use metaphor to sense patterns and generalisations in nature.\n06. Normalize knowledge. Define boundaries and interdependencies, formulate opposites, show interactions. Finally form simple principles out of these patterns and generalisations.\n07. Compose principles into novel ideas.\n08. \"Creativity takes courage.\"\n09. \"Show, don’t tell.\" Visualisation and narrativisation > verbalisation.\n10. Test new ground by lightly stepping on it.","html":"<ol>\n<li>\"The map is not the territory.\" Be mindful of what is.  </li>\n<li>Concentrate without distraction.  </li>\n<li>Hold opinions without gripping them.  </li>\n<li>\"Invert, always invert.\" Impose faces on reality and then ask them contentious questions. Interrogate topics from perspectives of distinct cultures, and reframe in diverse contexts.  </li>\n<li>Use metaphor to sense patterns and generalisations in nature.  </li>\n<li>Normalize knowledge. Define boundaries and interdependencies, formulate opposites, show interactions. Finally form simple principles out of these patterns and generalisations.  </li>\n<li>Compose principles into novel ideas.  </li>\n<li>\"Creativity takes courage.\"  </li>\n<li>\"Show, don’t tell.\" Visualisation and narrativisation > verbalisation.  </li>\n<li>Test new ground by lightly stepping on it.</li>\n</ol>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"2016-02-02 00:48:35","created_by":1,"updated_at":"2016-02-02 00:49:22","updated_by":1,"published_at":"2012-04-29 09:58:00","published_by":1,"visibility":"public","mobiledoc":null,"amp":null},{"id":11,"uuid":"a50c7e65-d369-4426-ad1e-84f0a720317b","title":"RESTful Web Services correctly inherit and use HTTP as their interface","slug":"restful-web-services-correctly-inherit-and-use-http-as-their-interface","markdown":"*To new readers of my blog. This article was written many years ago, and is no longer the entirety or core of what I believe. It remains here as a historical stepping stone to newer ideas.*\n\nThere’s been a lot of buzz on RESTful Web Services [1] and yet there are still far too many developers that believe they may implement it by simply using a Rest class provided by their favourite framework.\n\nI wonder if this has been helped by the obtuse or long-winded articles that are out there on the web and so here is my attempt at explaining the concept as concisely as possible:\n\nBuilding a RESTful web service requires that you stop building the same concepts that already exist in HTTP as part of your API and instead build a uniform API [2] that inherits the HTTP Interface [3] by (a.) treating URLs as resources, (b.) implementing CRUD using the HTTP methods POST, GET, PUT, and DELETE; and additionally using POST for operations with side-effects such as financial transactions, (c.) using the HTTP response codes and header data correctly, and by (d.) identifying and interconnecting resources by URIs in the responses, hence being hypertext-driven (HATEOAS).\n\n[1] http://roy.gbiv.com/untangled/tag/rest\n\n[2] http://news.ycombinator.com/item?id=2796371\n\n[3] http://www.ietf.org/rfc/rfc2616.txt","html":"<p><em>To new readers of my blog. This article was written many years ago, and is no longer the entirety or core of what I believe. It remains here as a historical stepping stone to newer ideas.</em></p>\n\n<p>There’s been a lot of buzz on RESTful Web Services [1] and yet there are still far too many developers that believe they may implement it by simply using a Rest class provided by their favourite framework.</p>\n\n<p>I wonder if this has been helped by the obtuse or long-winded articles that are out there on the web and so here is my attempt at explaining the concept as concisely as possible:</p>\n\n<p>Building a RESTful web service requires that you stop building the same concepts that already exist in HTTP as part of your API and instead build a uniform API [2] that inherits the HTTP Interface [3] by (a.) treating URLs as resources, (b.) implementing CRUD using the HTTP methods POST, GET, PUT, and DELETE; and additionally using POST for operations with side-effects such as financial transactions, (c.) using the HTTP response codes and header data correctly, and by (d.) identifying and interconnecting resources by URIs in the responses, hence being hypertext-driven (HATEOAS).</p>\n\n<p>[1] <a href=\"http://roy.gbiv.com/untangled/tag/rest\">http://roy.gbiv.com/untangled/tag/rest</a></p>\n\n<p>[2] <a href=\"http://news.ycombinator.com/item?id=2796371\">http://news.ycombinator.com/item?id=2796371</a></p>\n\n<p>[3] <a href=\"http://www.ietf.org/rfc/rfc2616.txt\">http://www.ietf.org/rfc/rfc2616.txt</a></p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"2016-02-02 00:49:30","created_by":1,"updated_at":"2016-02-02 00:50:08","updated_by":1,"published_at":"2012-01-01 09:32:00","published_by":1,"visibility":"public","mobiledoc":null,"amp":null},{"id":12,"uuid":"fd2b4587-4e7b-440d-8e8b-ef0b0c7d6a7e","title":"Enhanced Autodidactism for the Chronically Lazy and Hyperactive","slug":"enhanced-autodidactism-for-the-chronically-lazy-and-hyperactive","markdown":"If you find it difficult to concentrate: you might think it is difficult to finish projects or learn new things. This requires protracted effort, not something you are able or willing to give. Maybe you’ll give up: why bother forcing yourself to continue when you have no natural inclinations.\n\nBut don’t.\n\nDon’t try to push harder when you start to lose concentration. Do what you are most comfortable with: change direction and keep your energy levels high.\n\nHere are my suggestions on the changes which I’ve found have made me a more productive learner:\n\n01. **Set yourself very short-term goals.** Goals that can be achieved in mere hours. Break tasks up.\n02. **Build habits; avoid long-term goals.** Build habits that ensure you progress. Goals, once set, will cause you stress. Habits become second-nature. (Particularly build the habits around the fundamentals.)\n03. **Don’t force yourself to do something that you’re losing interest in.** Very few people would be able to manage that without negatively affecting their mood and making themselves worse off.\n04. **Move onto the next difficult task if you’re losing interest.** To remain productive, all you need to do is challenge yourself: make sure that everything that you move to is difficult, useful and requires learning. Don’t take shortcuts. You can always come back at a later date when you’re less bored by the topic and have smarter solutions. Distract yourself with other work, not entertainment.\n05. **Always do what you love (if you can).** This is for your sanity but also your productivity: you can’t work as hard when you’re not enjoying yourself.\n06. **Write every useful non-obvious bit of information down.** Write in as concise and clear a way as possible. And write for yourself: what you find illuminating; what you found challenging; the example which exemplified the problem most. Every couple of days pick up one of your books and skim it. It will jog your memory and give your frames of reference so you are able to quickly pick things up if you need them at a later date.\n07. **Network with people that have skills you want.** Find mentors. \n08. **Don’t overdo it.** If you’re close to a burn-out you need to stop and find balance.\n\n[Discuss on news.yc](http://news.ycombinator.com/item?id=2609604)\n\n**UPDATE:** I read a comment on [lesswrong](http://www.lesswrong.com/) that I think brings up another very meaningful tool in improving your productivity.\n\nThe author recommends [reducing transaction costs for habits of learning and productivity that you want to reinforce, while increasing transaction costs on habits which you want to stop](http://matt.might.net/articles/productivity-tips-hints-hacks-tricks-for-grad-students-academics/#philosophy). This is a brilliant idea, and actually reminds me of the strategy which I used to learn the guitar when I was younger. By carrying around my guitar while at home; placing the guitar in places where I did other leisure activities; and generally making sure that it was always in hand, it often caused me to spend hours more practicing than I would have otherwise. Additionally it removed ‘dead areas’ of time in which I wasn’t being engaged.","html":"<p>If you find it difficult to concentrate: you might think it is difficult to finish projects or learn new things. This requires protracted effort, not something you are able or willing to give. Maybe you’ll give up: why bother forcing yourself to continue when you have no natural inclinations.</p>\n\n<p>But don’t.</p>\n\n<p>Don’t try to push harder when you start to lose concentration. Do what you are most comfortable with: change direction and keep your energy levels high.</p>\n\n<p>Here are my suggestions on the changes which I’ve found have made me a more productive learner:</p>\n\n<ol>\n<li><strong>Set yourself very short-term goals.</strong> Goals that can be achieved in mere hours. Break tasks up.  </li>\n<li><strong>Build habits; avoid long-term goals.</strong> Build habits that ensure you progress. Goals, once set, will cause you stress. Habits become second-nature. (Particularly build the habits around the fundamentals.)  </li>\n<li><strong>Don’t force yourself to do something that you’re losing interest in.</strong> Very few people would be able to manage that without negatively affecting their mood and making themselves worse off.  </li>\n<li><strong>Move onto the next difficult task if you’re losing interest.</strong> To remain productive, all you need to do is challenge yourself: make sure that everything that you move to is difficult, useful and requires learning. Don’t take shortcuts. You can always come back at a later date when you’re less bored by the topic and have smarter solutions. Distract yourself with other work, not entertainment.  </li>\n<li><strong>Always do what you love (if you can).</strong> This is for your sanity but also your productivity: you can’t work as hard when you’re not enjoying yourself.  </li>\n<li><strong>Write every useful non-obvious bit of information down.</strong> Write in as concise and clear a way as possible. And write for yourself: what you find illuminating; what you found challenging; the example which exemplified the problem most. Every couple of days pick up one of your books and skim it. It will jog your memory and give your frames of reference so you are able to quickly pick things up if you need them at a later date.  </li>\n<li><strong>Network with people that have skills you want.</strong> Find mentors.  </li>\n<li><strong>Don’t overdo it.</strong> If you’re close to a burn-out you need to stop and find balance.</li>\n</ol>\n\n<p><a href=\"http://news.ycombinator.com/item?id=2609604\">Discuss on news.yc</a></p>\n\n<p><strong>UPDATE:</strong> I read a comment on <a href=\"http://www.lesswrong.com/\">lesswrong</a> that I think brings up another very meaningful tool in improving your productivity.</p>\n\n<p>The author recommends <a href=\"http://matt.might.net/articles/productivity-tips-hints-hacks-tricks-for-grad-students-academics/#philosophy\">reducing transaction costs for habits of learning and productivity that you want to reinforce, while increasing transaction costs on habits which you want to stop</a>. This is a brilliant idea, and actually reminds me of the strategy which I used to learn the guitar when I was younger. By carrying around my guitar while at home; placing the guitar in places where I did other leisure activities; and generally making sure that it was always in hand, it often caused me to spend hours more practicing than I would have otherwise. Additionally it removed ‘dead areas’ of time in which I wasn’t being engaged.</p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"2016-02-02 00:50:27","created_by":1,"updated_at":"2016-02-02 00:51:18","updated_by":1,"published_at":"2011-12-19 11:48:00","published_by":1,"visibility":"public","mobiledoc":null,"amp":null},{"id":14,"uuid":"6f67309d-d5c8-4c73-9485-52beba0f6511","title":"Avoiding False Cause","slug":"avoiding-false-cause","markdown":"Tech teams often cargo-cult the practices and patterns that are established earlier on by their creators.\n\nThis can lead to useless boilerplate proliferating and sometimes to the creators finding that there is some value in disavowing their earlier approaches.\n\n<blockquote data-conversation=\"none\" class=\"twitter-tweet tw-align-center\" data-lang=\"en-gb\"><p lang=\"en\" dir=\"ltr\">Many don’t realize I wrote all that stuff when React was relatively new and people shared what they learned, not instilled “rules”.</p>&mdash; Dan Abramov (@dan_abramov) <a href=\"https://twitter.com/dan_abramov/status/802571906385932288\">26 November 2016</a></blockquote>\n\n## Dogma Is Bad But Noticing Things Is Hard\n\nDogma is bad because it leads to poorly-fit solutions.\n\nHowever, in the absence of dogma and without the experiences and heuristics from a lengthy career in software engineering, a greater problem reveals itself: *it's hard to correctly notice the causes of problems*.\n\nSo dogma might not be the right solution, but it does serve a purpose. Without frameworks to act as guard rails, patterns and best-practices are needed to help junior engineers find their feet.\n\n## Problem Solving\n\nThe central instruments of problem-solving are:\n\n1. Carefully *noticing* things.\n2. Correctly *establishing* cause-and-effect.\n3. Effectively *implementing* solutions.\n\nAs engineers we often focus our energy on the final step, however I will concentrate on 'noticing things'.\n\nBy talking about the things we notice, we can create opportunities for others to evaluate them further, and we can democratize avoiding [false causes](https://en.wikipedia.org/wiki/Questionable_cause) and bad solutions that otherwise waste developer productivity.\n\n________________________________________\n\n## Noticing Things\n\nOver the last few years, I've spent some time working as a consultant full-stack engineer, sometimes within the React/Redux world, and often within teams predominately made up from junior engineers.\n\nSome of the problems that I noticed are already in the process of being fixed (e.g. complex build processes should no longer be the default with libraries like [`create-react-app`](https://github.com/facebookincubator/create-react-app)). However I also encountered a number of problems that surprised me.\n\nThis lead me to believe that (1) while we might find fault in our dogmas there are many ways in which we are too permissive, and (2) there are useful patterns and heuristics that are either unwritten or overlooked.\n\nHere are some of the issues I encountered:\n\n### Mismanagement of salience\n\n> **salience**<br />\n> ˈseɪlɪəns/<br />\n> *noun*<br />\n> noun: **salience**; noun: **saliency**; plural noun: **saliencies**<br />\n> the quality of being particularly noticeable or important; prominence.<br />\n> \"the political salience of religion has a considerable impact\"\n\nSoftware and its outputs should be understood by all engineers that work on it. Great developer experience (DX) is largely about control over salience.\n\nHere are a few examples of how problems of saliency often occur:\n\n#### Silent failures or overly noisy output\n\n<u>Silence</u>\n\nI once worked on a codebase which was very heavily tooled, and on which one of the more junior engineers often complained about having difficulties getting his code to work. From time to time I would come over to help fix logical issues and provide direction, often relying on my ability to quickly understand what was being coded rather than any particular debugging technique. Since this generally helped, I incorrectly assumed the complaint was due to the occasional mistakes I spotted within the code.\n\nA few weeks later, I made a linting error in my own code, started the app and got a white screen of death. I checked the Developer Console and to my surprise saw a 404 error against the request for the JavaScript.\n\nIt turned out that our build process had been misconfigured and would exit without outputting code if it found any linting error. To make matters worse it emitted no errors when it did this. Failure was silent.\n\nThis behaviour primarily affected junior engineers on the team, since many senior engineers program within the linters rules by default and hence rarely see its errors. A process that had originally been setup to help engineers write consistent code was ironically hindering their understanding by making their logic fail for irrelevant reasons. And, since those that wrote the build process were less exposed to linting errors the problem was effectively invisible to them.\n\nI suspect that this class of problem is more common than you'd expect. Build processes are often cobbled together at the start of projects by senior/lead engineers, who are likely to hit different edge-cases than beginners.\n\nLessons learned:\n\n- A build process should have invariants for its expected outputs and should error loudly when it fails any of these.\n- Junior engineers are important customers of build processes and developer tools. We should seek their feedback when creating or combining tools that they rely on more so than us.\n- It's a good idea to use an off-the-shelf build process and to avoid hacking together a new one for every project you create.\n\n<u>Noise</u>\n\nOn the other end of the spectrum is the [Tragedy of the Commons](https://en.wikipedia.org/wiki/Tragedy_of_the_commons) that occurs when combining lots of disparate tools into a single process.\n\nA popular software principle is the [Unix Philosophy](https://en.wikipedia.org/wiki/Unix_philosophy)'s [Rule of Silence](http://www.linfo.org/rule_of_silence.html). This states:\n\n> Developers should design programs so that they do not print unnecessary output. This rule aims to allow other programs and developers to pick out the information they need from a program's output without having to parse verbosity.\n\nOften individual tools will follow this principle, or at least provide options to help reduce the default verbosity (e.g. `npm run -s` and `webpack-dev-server --no-info`). However, as engineers begin to combine them the total output will tend to become noisy and difficult to parse, reducing its usability.\n\n#### Defactoring to understand code and hence leaving a larger surface area for errors\n\nBeginners tend to understand and debug problems through tinkering and excavation instead of through contextual readings of the code or situation.\n\nThis will sometimes lead them to [defactor](http://raganwald.com/2013/10/08/defactoring.html) logic towards units of meaning that are easier for them to granularly understand and observe. This can lead to a loss of salience for more experienced engineers that have learnt to work at a higher-level of abstraction due to its greater expressivity, and reduced surface area for errors.\n\nUnless we retreat back up the ladder of abstraction after gaining understanding this can aggravate future problems.\n\n#### Unamenabilility to laddering\n\n<u>A preference for trees or forests</u>\n\nA suspicion I have is that in order to gain understanding and debug problems different engineers require different things to be salient. Senior engineers might prefer for the overall approach and context to be expressive and concise so that it can be checked against their [previous experiences](https://en.wikipedia.org/wiki/Indexicality), while junior engineers might need the individual details of the problem to be most salient so they can build understanding from scratch.\n\n<u>Laddering</u>\n\n<blockquote class=\"twitter-tweet tw-align-center\" data-conversation=\"none\" data-lang=\"en\"><p lang=\"en\" dir=\"ltr\">I believe that the deepest understandings will come from a new form of &quot;reading&quot; which is actively moving up and down such a ladder. 4/</p>&mdash; Bret Victor (@worrydream) <a href=\"https://twitter.com/worrydream/status/812369681075965952\">December 23, 2016</a></blockquote>\n\nMaybe a useful way of looking at the developer experience of a codebase is to try to judge it by the quality of the abstraction ladder that has been embedded within it? How easy is it for engineers with differing preferences towards granularities of abstraction to move up-and-down this ladder? Can they do so non-destructively?\n\n<div class=\"center\" style=\"text-align: center\">\n![Abstraction Ladder](http://i.imgur.com/tRf29Nx.gif)\n<em>\"Language in Thought and Action\" by S.I. Hayakawa</em>\n</div>\n\nI have recently seen valuable work being done [improving error messages](http://elm-lang.org/blog/compilers-as-assistants) by expressing them as a granular detail (including a diff of expected to actual) alongside context and beginner hints. This is analogous to [Bret Victor's tweet on stories and stats](https://twitter.com/worrydream/status/812369540386459648).\n\n### Deep-nesting and nullability\n\nAs a JavaScript engineer, it's not unusual to run into errors like `TypeError: props.service.manufacturingService is undefined`. (For the purposes of this explanation, ignore the uselessness of that error message.)\n\nIn the absence of [static typing](https://en.wikipedia.org/wiki/Type_system#Static_type_checking) deeply-nested object properties often signal that some code is likely to be fragile.\n\nFor example:\n\n```js\nimport React from 'react'\n\nconst roleNames = {\n  CHAIRMAN: 'Chairman',\n  CEO: 'Chief Executive Officer',\n  MD: 'Managing Director'\n}\n\nconst SomeComponentDeepWithinHierarchy = (props) => {\n  return (\n    <div className=\"service-box\">\n      <h2>{props.service.name}<h2>\n      <div className=\"service-box__info\">\n        <p>{props.service.description}</p>\n        {props.service.manufacturingService.factories[0] ?\n          <ul>\n            <li>Primary Factory: {props.service.manufacturingService.factories[0].name}</li>\n            <li>Owner Role: {roleNames[props.service.manufacturingService.factories[0].owners[0].roleType]}</li>\n          </ul>\n        : ''}\n      </div>\n    </div>\n  )\n}\n\nexport default SomeComponentDeepWithinHierarchy\n```\n\nThe logic shown above has many opportunities to throw `TypeError`s:\n\n- `props.service` could be null.\n- `props.service.manufacturingService` could be null.\n- `props.service.manufacturingService.factories[0]` could be null or empty.\n- `props.service.manufacturingService.factories[0].owners[0]` could be null or empty.\n- `roleNames` could be missing a key-value mapping for `props.service.manufacturingService.factories[0].owners[0].role`. (This won't even throw an error, but instead will silently evaluate to `undefined`.)\n- Etc.\n\nTo make matters worse, every time `service` is passed down the component hierarchy into a component that will read from it, it endows a stealth requirement to either trust that the data is there, or to manually check before each property access.\n\nOften a back-end engineer who works in a language with static typing can produce deeply-nested objects like these without thinking twice. And, if the shape of the object hasn't yet been stabilised on the back-end, uncertainty on the front-end can quickly cause a proliferation of defensive programming to amass throughout the component hierarchy (e.g. if-else checks on `props.service && props.service.manufacturingService && props.service.manufacturingService.factories.length && ...`) Over time these checks become FUD that clouds other team member's understanding of data contracts.\n\nEngineers with less experience working with JavaScript won't realise that they have a problem until it's too late. And, they will sometimes [exasperate the problem](https://en.wikipedia.org/wiki/Law_of_Demeter) by trying to reduce key strokes: for example, by choosing to pass through kitchen-and-sink objects so function signatures look simpler.\n\nOf course, there are best practices. For example: objects can be flattened, nullability reduced at the source, defaults can be provided, [`flowtype`](https://flowtype.org/) definitions setup, [transforms](https://github.com/yury-dymov/json-api-normalizer) moved to the edges, [selectors](https://github.com/reactjs/reselect) configured, and finally when there is no other choice careful use of [deep property selector functions](http://ramdajs.com/docs/#prop).\n\n### Reducers with too many possible output shapes\n\nThe best way I can explain this is to write intentionally bad code as an example:\n\n```js\nconst initialState = {\n  priceToggle: false,\n  userConfig: {}\n}\n\nexport default function reducer (state = initialState, action) {\n  const newState = cloneDeep(state)\n\n  switch (action.type) {\n    case 'SET_CONFIG_DATA':\n      return {\n        userConfig: action.payload.userConfig\n      }\n    case 'FETCH_USER_SUCCESS':\n      newState.currentUser = action.payload\n      break\n    case 'FETCH_PRODUCTS_SUCCESS':\n      newState.products = action.payload\n      break\n    case 'MARK_AS_EDITING_PRODUCT':\n      const { productIndex } = action.payload\n      newState.editingProductIndex = productIndex\n      newState.products[productIndex].originalData = newState.products[productIndex]\n      newState.products[productIndex].editing = true\n      break\n    case 'UPDATE_PRODUCT_KEY':\n      const { productIndex, propertyName, propertyValue } = action.payload\n      if (newState.products[productIndex][propertyName] !== propertyValue) {\n        newState.products[productIndex].changed = true\n      }\n      newState.products[productIndex][propertyName] = propertyValue\n      break\n    case 'MARK_AS_NO_LONGER_EDITING_PRODUCT':\n      const { productIndex } = action.payload\n      newState.products[productIndex] = newState.products[productIndex].originalData\n      break\n    case 'CREATE_PRODUCT_SUCCESS':\n      const { productIndex } = action.payload\n      newState.products[productIndex].editing = false\n      delete newState.products[productIndex].originalData\n      break\n    case 'FETCH_SUPERSTORES_SUCCESS':\n      newState.superstores = action.payload\n      if (!newState.currentSuperstoreId) {\n        newState.currentSuperstoreId = newState.superstores[0].id\n      }\n      break\n    case 'SELECT_SUPERSTORE':\n      newState.currentSuperstoreId = action.payload\n      break\n    case 'TOGGLE_PRICE':\n      newState.priceToggle = !newState.priceToggle\n      break\n  }\n\n  return newState\n}\n```\n\n- **Difficult to determine the reducer's output shape**: By default it will contain a boolean for `priceToggle` and an empty object for `userConfig`, but almost every other property might be `null`, and in fact `products` can have dynamic properties.\n- **Difficult to read the state mutations within branches**: It's also hard to read since step-by-step mutations are applied to `newState` in order to generate the correct object.\n- **Reducer's output shape is dependent on the order of the actions received**: Depending on the collection of and order of the actions that are received, the reducer will output a different shaped object. In fact, in this example, if `SET_CONFIG_DATA` is called after the other actions it will destroy the state they'd setup.\n\nThis problem is considerably worse when a reducer has over 20 branches or is over 1000 lines long. In one project I consulted on, a decision had been made to store all of the state required for each page in a respective reducer, and this combined with a lack of experience handling data made it very difficult to reason when there were bugs.\n\nIf you're not yet using static typing in your app, you should at least ensure that you define a common reducer output shape for each of your reducer's `initialState`s.\n\n### Using reducer as if it is mutable global state\n\nWithin the earlier reducer code example, there are also a few other issues:\n\n#### Switching into 'editing' mode, and then resetting state on cancellation\n\nMutating the data that is currently displayed on the screen, and then resetting it if the edit is cancelled is a bad pattern. It's preferable to mimic [transactions](https://en.m.wikipedia.org/wiki/Database_transaction) by placing the data that is going to be edited into another store where it can be mutated, and then only choosing to mutate the original data if [the operation is successful](https://github.com/erikras/redux-form/blob/master/docs/api/Props.md#handlesubmiteventorsubmit--function). This is better since it is less destructive by default, and side-effects only when it needs to.\n\n#### Making multiple, dynamic key-value changes\n\nAction creators of the form `setProductProperty(propertyName: string, propertyValue: ?any)` allow you to write any value into an object. This is problematic since it is so general that it is descriptive of almost any mutation. There are a few cases in which it might be the right solution, however in most cases we should constrain its signature in a way that is descriptive of a more specific intention and name our actions so that they describe the *action that should occur* instead of the *state that should be set*.\n\n#### Storing, mutating and then resending API responses back to the server\n\nPages that receive data from an API, display it, update it and then send it back to the server should not mutate the original data that was received from the server. The reason for this is that it's confusing for the client and the server to be out-of-sync and buggy if other pages or components rely on this data being correct. Instead it's better to treat the server data as if it is immutable, and to store it separately from the data that the client is preparing for the server. A benefit of this is that it makes it much more explicit whether the data that is being sent back was provided by the server or whether it has been created or modified client-side.\n\n_________________________________________\n\nIn writing this essay my hope is that others will also share the things they've noticed, and that this will help to inform those that create libraries or tools on how to best increase accessibility for both beginners and experts.\n","html":"<p>Tech teams often cargo-cult the practices and patterns that are established earlier on by their creators.</p>\n\n<p>This can lead to useless boilerplate proliferating and sometimes to the creators finding that there is some value in disavowing their earlier approaches.</p>\n\n<blockquote data-conversation=\"none\" class=\"twitter-tweet tw-align-center\" data-lang=\"en-gb\"><p lang=\"en\" dir=\"ltr\">Many don’t realize I wrote all that stuff when React was relatively new and people shared what they learned, not instilled “rules”.</p>&mdash; Dan Abramov (@dan_abramov) <a href=\"https://twitter.com/dan_abramov/status/802571906385932288\">26 November 2016</a></blockquote>\n\n<h2 id=\"dogmaisbadbutnoticingthingsishard\">Dogma Is Bad But Noticing Things Is Hard</h2>\n\n<p>Dogma is bad because it leads to poorly-fit solutions.</p>\n\n<p>However, in the absence of dogma and without the experiences and heuristics from a lengthy career in software engineering, a greater problem reveals itself: <em>it's hard to correctly notice the causes of problems</em>.</p>\n\n<p>So dogma might not be the right solution, but it does serve a purpose. Without frameworks to act as guard rails, patterns and best-practices are needed to help junior engineers find their feet.</p>\n\n<h2 id=\"problemsolving\">Problem Solving</h2>\n\n<p>The central instruments of problem-solving are:</p>\n\n<ol>\n<li>Carefully <em>noticing</em> things.  </li>\n<li>Correctly <em>establishing</em> cause-and-effect.  </li>\n<li>Effectively <em>implementing</em> solutions.</li>\n</ol>\n\n<p>As engineers we often focus our energy on the final step, however I will concentrate on 'noticing things'.</p>\n\n<p>By talking about the things we notice, we can create opportunities for others to evaluate them further, and we can democratize avoiding <a href=\"https://en.wikipedia.org/wiki/Questionable_cause\">false causes</a> and bad solutions that otherwise waste developer productivity.</p>\n\n<hr />\n\n<h2 id=\"noticingthings\">Noticing Things</h2>\n\n<p>Over the last few years, I've spent some time working as a consultant full-stack engineer, sometimes within the React/Redux world, and often within teams predominately made up from junior engineers.</p>\n\n<p>Some of the problems that I noticed are already in the process of being fixed (e.g. complex build processes should no longer be the default with libraries like <a href=\"https://github.com/facebookincubator/create-react-app\"><code>create-react-app</code></a>). However I also encountered a number of problems that surprised me.</p>\n\n<p>This lead me to believe that (1) while we might find fault in our dogmas there are many ways in which we are too permissive, and (2) there are useful patterns and heuristics that are either unwritten or overlooked.</p>\n\n<p>Here are some of the issues I encountered:</p>\n\n<h3 id=\"mismanagementofsalience\">Mismanagement of salience</h3>\n\n<blockquote>\n  <p><strong>salience</strong><br />\n  ˈseɪlɪəns/<br />\n  <em>noun</em><br />\n  noun: <strong>salience</strong>; noun: <strong>saliency</strong>; plural noun: <strong>saliencies</strong><br />\n  the quality of being particularly noticeable or important; prominence.<br />\n  \"the political salience of religion has a considerable impact\"</p>\n</blockquote>\n\n<p>Software and its outputs should be understood by all engineers that work on it. Great developer experience (DX) is largely about control over salience.</p>\n\n<p>Here are a few examples of how problems of saliency often occur:</p>\n\n<h4 id=\"silentfailuresoroverlynoisyoutput\">Silent failures or overly noisy output</h4>\n\n<p><u>Silence</u></p>\n\n<p>I once worked on a codebase which was very heavily tooled, and on which one of the more junior engineers often complained about having difficulties getting his code to work. From time to time I would come over to help fix logical issues and provide direction, often relying on my ability to quickly understand what was being coded rather than any particular debugging technique. Since this generally helped, I incorrectly assumed the complaint was due to the occasional mistakes I spotted within the code.</p>\n\n<p>A few weeks later, I made a linting error in my own code, started the app and got a white screen of death. I checked the Developer Console and to my surprise saw a 404 error against the request for the JavaScript.</p>\n\n<p>It turned out that our build process had been misconfigured and would exit without outputting code if it found any linting error. To make matters worse it emitted no errors when it did this. Failure was silent.</p>\n\n<p>This behaviour primarily affected junior engineers on the team, since many senior engineers program within the linters rules by default and hence rarely see its errors. A process that had originally been setup to help engineers write consistent code was ironically hindering their understanding by making their logic fail for irrelevant reasons. And, since those that wrote the build process were less exposed to linting errors the problem was effectively invisible to them.</p>\n\n<p>I suspect that this class of problem is more common than you'd expect. Build processes are often cobbled together at the start of projects by senior/lead engineers, who are likely to hit different edge-cases than beginners.</p>\n\n<p>Lessons learned:</p>\n\n<ul>\n<li>A build process should have invariants for its expected outputs and should error loudly when it fails any of these.</li>\n<li>Junior engineers are important customers of build processes and developer tools. We should seek their feedback when creating or combining tools that they rely on more so than us.</li>\n<li>It's a good idea to use an off-the-shelf build process and to avoid hacking together a new one for every project you create.</li>\n</ul>\n\n<p><u>Noise</u></p>\n\n<p>On the other end of the spectrum is the <a href=\"https://en.wikipedia.org/wiki/Tragedy_of_the_commons\">Tragedy of the Commons</a> that occurs when combining lots of disparate tools into a single process.</p>\n\n<p>A popular software principle is the <a href=\"https://en.wikipedia.org/wiki/Unix_philosophy\">Unix Philosophy</a>'s <a href=\"http://www.linfo.org/rule_of_silence.html\">Rule of Silence</a>. This states:</p>\n\n<blockquote>\n  <p>Developers should design programs so that they do not print unnecessary output. This rule aims to allow other programs and developers to pick out the information they need from a program's output without having to parse verbosity.</p>\n</blockquote>\n\n<p>Often individual tools will follow this principle, or at least provide options to help reduce the default verbosity (e.g. <code>npm run -s</code> and <code>webpack-dev-server --no-info</code>). However, as engineers begin to combine them the total output will tend to become noisy and difficult to parse, reducing its usability.</p>\n\n<h4 id=\"defactoringtounderstandcodeandhenceleavingalargersurfaceareaforerrors\">Defactoring to understand code and hence leaving a larger surface area for errors</h4>\n\n<p>Beginners tend to understand and debug problems through tinkering and excavation instead of through contextual readings of the code or situation.</p>\n\n<p>This will sometimes lead them to <a href=\"http://raganwald.com/2013/10/08/defactoring.html\">defactor</a> logic towards units of meaning that are easier for them to granularly understand and observe. This can lead to a loss of salience for more experienced engineers that have learnt to work at a higher-level of abstraction due to its greater expressivity, and reduced surface area for errors.</p>\n\n<p>Unless we retreat back up the ladder of abstraction after gaining understanding this can aggravate future problems.</p>\n\n<h4 id=\"unamenabililitytoladdering\">Unamenabilility to laddering</h4>\n\n<p><u>A preference for trees or forests</u></p>\n\n<p>A suspicion I have is that in order to gain understanding and debug problems different engineers require different things to be salient. Senior engineers might prefer for the overall approach and context to be expressive and concise so that it can be checked against their <a href=\"https://en.wikipedia.org/wiki/Indexicality\">previous experiences</a>, while junior engineers might need the individual details of the problem to be most salient so they can build understanding from scratch.</p>\n\n<p><u>Laddering</u></p>\n\n<blockquote class=\"twitter-tweet tw-align-center\" data-conversation=\"none\" data-lang=\"en\"><p lang=\"en\" dir=\"ltr\">I believe that the deepest understandings will come from a new form of &quot;reading&quot; which is actively moving up and down such a ladder. 4/</p>&mdash; Bret Victor (@worrydream) <a href=\"https://twitter.com/worrydream/status/812369681075965952\">December 23, 2016</a></blockquote>\n\n<p>Maybe a useful way of looking at the developer experience of a codebase is to try to judge it by the quality of the abstraction ladder that has been embedded within it? How easy is it for engineers with differing preferences towards granularities of abstraction to move up-and-down this ladder? Can they do so non-destructively?</p>\n\n<div class=\"center\" style=\"text-align: center\">  \n<img src=\"http://i.imgur.com/tRf29Nx.gif\" alt=\"Abstraction Ladder\" />\n<em>\"Language in Thought and Action\" by S.I. Hayakawa</em>  \n</div>\n\n<p>I have recently seen valuable work being done <a href=\"http://elm-lang.org/blog/compilers-as-assistants\">improving error messages</a> by expressing them as a granular detail (including a diff of expected to actual) alongside context and beginner hints. This is analogous to <a href=\"https://twitter.com/worrydream/status/812369540386459648\">Bret Victor's tweet on stories and stats</a>.</p>\n\n<h3 id=\"deepnestingandnullability\">Deep-nesting and nullability</h3>\n\n<p>As a JavaScript engineer, it's not unusual to run into errors like <code>TypeError: props.service.manufacturingService is undefined</code>. (For the purposes of this explanation, ignore the uselessness of that error message.)</p>\n\n<p>In the absence of <a href=\"https://en.wikipedia.org/wiki/Type_system#Static_type_checking\">static typing</a> deeply-nested object properties often signal that some code is likely to be fragile.</p>\n\n<p>For example:</p>\n\n<pre><code class=\"language-js\">import React from 'react'\n\nconst roleNames = {  \n  CHAIRMAN: 'Chairman',\n  CEO: 'Chief Executive Officer',\n  MD: 'Managing Director'\n}\n\nconst SomeComponentDeepWithinHierarchy = (props) =&gt; {  \n  return (\n    &lt;div className=\"service-box\"&gt;\n      &lt;h2&gt;{props.service.name}&lt;h2&gt;\n      &lt;div className=\"service-box__info\"&gt;\n        &lt;p&gt;{props.service.description}&lt;/p&gt;\n        {props.service.manufacturingService.factories[0] ?\n          &lt;ul&gt;\n            &lt;li&gt;Primary Factory: {props.service.manufacturingService.factories[0].name}&lt;/li&gt;\n            &lt;li&gt;Owner Role: {roleNames[props.service.manufacturingService.factories[0].owners[0].roleType]}&lt;/li&gt;\n          &lt;/ul&gt;\n        : ''}\n      &lt;/div&gt;\n    &lt;/div&gt;\n  )\n}\n\nexport default SomeComponentDeepWithinHierarchy  \n</code></pre>\n\n<p>The logic shown above has many opportunities to throw <code>TypeError</code>s:</p>\n\n<ul>\n<li><code>props.service</code> could be null.</li>\n<li><code>props.service.manufacturingService</code> could be null.</li>\n<li><code>props.service.manufacturingService.factories[0]</code> could be null or empty.</li>\n<li><code>props.service.manufacturingService.factories[0].owners[0]</code> could be null or empty.</li>\n<li><code>roleNames</code> could be missing a key-value mapping for <code>props.service.manufacturingService.factories[0].owners[0].role</code>. (This won't even throw an error, but instead will silently evaluate to <code>undefined</code>.)</li>\n<li>Etc.</li>\n</ul>\n\n<p>To make matters worse, every time <code>service</code> is passed down the component hierarchy into a component that will read from it, it endows a stealth requirement to either trust that the data is there, or to manually check before each property access.</p>\n\n<p>Often a back-end engineer who works in a language with static typing can produce deeply-nested objects like these without thinking twice. And, if the shape of the object hasn't yet been stabilised on the back-end, uncertainty on the front-end can quickly cause a proliferation of defensive programming to amass throughout the component hierarchy (e.g. if-else checks on <code>props.service &amp;&amp; props.service.manufacturingService &amp;&amp; props.service.manufacturingService.factories.length &amp;&amp; ...</code>) Over time these checks become FUD that clouds other team member's understanding of data contracts.</p>\n\n<p>Engineers with less experience working with JavaScript won't realise that they have a problem until it's too late. And, they will sometimes <a href=\"https://en.wikipedia.org/wiki/Law_of_Demeter\">exasperate the problem</a> by trying to reduce key strokes: for example, by choosing to pass through kitchen-and-sink objects so function signatures look simpler.</p>\n\n<p>Of course, there are best practices. For example: objects can be flattened, nullability reduced at the source, defaults can be provided, <a href=\"https://flowtype.org/\"><code>flowtype</code></a> definitions setup, <a href=\"https://github.com/yury-dymov/json-api-normalizer\">transforms</a> moved to the edges, <a href=\"https://github.com/reactjs/reselect\">selectors</a> configured, and finally when there is no other choice careful use of <a href=\"http://ramdajs.com/docs/#prop\">deep property selector functions</a>.</p>\n\n<h3 id=\"reducerswithtoomanypossibleoutputshapes\">Reducers with too many possible output shapes</h3>\n\n<p>The best way I can explain this is to write intentionally bad code as an example:</p>\n\n<pre><code class=\"language-js\">const initialState = {  \n  priceToggle: false,\n  userConfig: {}\n}\n\nexport default function reducer (state = initialState, action) {  \n  const newState = cloneDeep(state)\n\n  switch (action.type) {\n    case 'SET_CONFIG_DATA':\n      return {\n        userConfig: action.payload.userConfig\n      }\n    case 'FETCH_USER_SUCCESS':\n      newState.currentUser = action.payload\n      break\n    case 'FETCH_PRODUCTS_SUCCESS':\n      newState.products = action.payload\n      break\n    case 'MARK_AS_EDITING_PRODUCT':\n      const { productIndex } = action.payload\n      newState.editingProductIndex = productIndex\n      newState.products[productIndex].originalData = newState.products[productIndex]\n      newState.products[productIndex].editing = true\n      break\n    case 'UPDATE_PRODUCT_KEY':\n      const { productIndex, propertyName, propertyValue } = action.payload\n      if (newState.products[productIndex][propertyName] !== propertyValue) {\n        newState.products[productIndex].changed = true\n      }\n      newState.products[productIndex][propertyName] = propertyValue\n      break\n    case 'MARK_AS_NO_LONGER_EDITING_PRODUCT':\n      const { productIndex } = action.payload\n      newState.products[productIndex] = newState.products[productIndex].originalData\n      break\n    case 'CREATE_PRODUCT_SUCCESS':\n      const { productIndex } = action.payload\n      newState.products[productIndex].editing = false\n      delete newState.products[productIndex].originalData\n      break\n    case 'FETCH_SUPERSTORES_SUCCESS':\n      newState.superstores = action.payload\n      if (!newState.currentSuperstoreId) {\n        newState.currentSuperstoreId = newState.superstores[0].id\n      }\n      break\n    case 'SELECT_SUPERSTORE':\n      newState.currentSuperstoreId = action.payload\n      break\n    case 'TOGGLE_PRICE':\n      newState.priceToggle = !newState.priceToggle\n      break\n  }\n\n  return newState\n}\n</code></pre>\n\n<ul>\n<li><strong>Difficult to determine the reducer's output shape</strong>: By default it will contain a boolean for <code>priceToggle</code> and an empty object for <code>userConfig</code>, but almost every other property might be <code>null</code>, and in fact <code>products</code> can have dynamic properties.</li>\n<li><strong>Difficult to read the state mutations within branches</strong>: It's also hard to read since step-by-step mutations are applied to <code>newState</code> in order to generate the correct object.</li>\n<li><strong>Reducer's output shape is dependent on the order of the actions received</strong>: Depending on the collection of and order of the actions that are received, the reducer will output a different shaped object. In fact, in this example, if <code>SET_CONFIG_DATA</code> is called after the other actions it will destroy the state they'd setup.</li>\n</ul>\n\n<p>This problem is considerably worse when a reducer has over 20 branches or is over 1000 lines long. In one project I consulted on, a decision had been made to store all of the state required for each page in a respective reducer, and this combined with a lack of experience handling data made it very difficult to reason when there were bugs.</p>\n\n<p>If you're not yet using static typing in your app, you should at least ensure that you define a common reducer output shape for each of your reducer's <code>initialState</code>s.</p>\n\n<h3 id=\"usingreducerasifitismutableglobalstate\">Using reducer as if it is mutable global state</h3>\n\n<p>Within the earlier reducer code example, there are also a few other issues:</p>\n\n<h4 id=\"switchingintoeditingmodeandthenresettingstateoncancellation\">Switching into 'editing' mode, and then resetting state on cancellation</h4>\n\n<p>Mutating the data that is currently displayed on the screen, and then resetting it if the edit is cancelled is a bad pattern. It's preferable to mimic <a href=\"https://en.m.wikipedia.org/wiki/Database_transaction\">transactions</a> by placing the data that is going to be edited into another store where it can be mutated, and then only choosing to mutate the original data if <a href=\"https://github.com/erikras/redux-form/blob/master/docs/api/Props.md#handlesubmiteventorsubmit--function\">the operation is successful</a>. This is better since it is less destructive by default, and side-effects only when it needs to.</p>\n\n<h4 id=\"makingmultipledynamickeyvaluechanges\">Making multiple, dynamic key-value changes</h4>\n\n<p>Action creators of the form <code>setProductProperty(propertyName: string, propertyValue: ?any)</code> allow you to write any value into an object. This is problematic since it is so general that it is descriptive of almost any mutation. There are a few cases in which it might be the right solution, however in most cases we should constrain its signature in a way that is descriptive of a more specific intention and name our actions so that they describe the <em>action that should occur</em> instead of the <em>state that should be set</em>.</p>\n\n<h4 id=\"storingmutatingandthenresendingapiresponsesbacktotheserver\">Storing, mutating and then resending API responses back to the server</h4>\n\n<p>Pages that receive data from an API, display it, update it and then send it back to the server should not mutate the original data that was received from the server. The reason for this is that it's confusing for the client and the server to be out-of-sync and buggy if other pages or components rely on this data being correct. Instead it's better to treat the server data as if it is immutable, and to store it separately from the data that the client is preparing for the server. A benefit of this is that it makes it much more explicit whether the data that is being sent back was provided by the server or whether it has been created or modified client-side.</p>\n\n<hr />\n\n<p>In writing this essay my hope is that others will also share the things they've noticed, and that this will help to inform those that create libraries or tools on how to best increase accessibility for both beginners and experts.</p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"2017-01-04 14:05:13","created_by":1,"updated_at":"2017-01-12 12:06:38","updated_by":1,"published_at":"2017-01-12 00:17:27","published_by":1,"visibility":"public","mobiledoc":null,"amp":null}],"users":[{"id":1,"uuid":"fd026954-27ec-4612-aecd-6de594c1fb67","name":"Seb Insua","slug":"sebinsua","password":"$2a$10$eU.FeI1/nGBl3QryXpY0buqb9RkgtX3OwyHEp/XOjhuuTw.ieSsN.","email":"me@sebinsua.com","image":"/content/images/2016/02/si.png","cover":null,"bio":"","website":"http://twitter.com/sebinsua","location":"London","accessibility":null,"status":"active","language":"en_US","meta_title":null,"meta_description":null,"tour":null,"last_login":"2021-08-06 19:37:51","created_at":"2016-02-02 00:22:26","created_by":1,"updated_at":"2021-08-06 19:37:51","updated_by":1,"visibility":"public","facebook":"heyseb","twitter":"@sebinsua"}],"roles":[{"id":1,"uuid":"3e2d788f-9482-4b94-b9e8-52960999152c","name":"Administrator","description":"Administrators","created_at":"2016-02-02 00:22:25","created_by":1,"updated_at":"2016-02-02 00:22:25","updated_by":1},{"id":2,"uuid":"b05761d8-844d-4e8b-9b3c-0ba24d3730c9","name":"Editor","description":"Editors","created_at":"2016-02-02 00:22:25","created_by":1,"updated_at":"2016-02-02 00:22:25","updated_by":1},{"id":3,"uuid":"c52034bf-ff5f-4197-93e2-a8c8f19feb51","name":"Author","description":"Authors","created_at":"2016-02-02 00:22:25","created_by":1,"updated_at":"2016-02-02 00:22:25","updated_by":1},{"id":4,"uuid":"60a92eac-99d2-4da6-8cd0-74b2f8a59893","name":"Owner","description":"Blog Owner","created_at":"2016-02-02 00:22:25","created_by":1,"updated_at":"2016-02-02 00:22:25","updated_by":1}],"roles_users":[{"id":1,"role_id":4,"user_id":1}],"permissions":[{"id":1,"uuid":"9a31c4e1-e03a-45de-9b41-620909547311","name":"Export database","object_type":"db","action_type":"exportContent","object_id":null,"created_at":"2016-02-02 00:22:25","created_by":1,"updated_at":"2016-02-02 00:22:25","updated_by":1},{"id":2,"uuid":"d7acfff3-9603-4e96-863a-84937c2e16a4","name":"Import database","object_type":"db","action_type":"importContent","object_id":null,"created_at":"2016-02-02 00:22:25","created_by":1,"updated_at":"2016-02-02 00:22:25","updated_by":1},{"id":3,"uuid":"97f109ae-2721-426b-8711-bdb6d318a650","name":"Delete all content","object_type":"db","action_type":"deleteAllContent","object_id":null,"created_at":"2016-02-02 00:22:25","created_by":1,"updated_at":"2016-02-02 00:22:25","updated_by":1},{"id":4,"uuid":"4ae89a3d-5af4-4caa-b25b-7a6c19604a27","name":"Send mail","object_type":"mail","action_type":"send","object_id":null,"created_at":"2016-02-02 00:22:25","created_by":1,"updated_at":"2016-02-02 00:22:25","updated_by":1},{"id":5,"uuid":"1faea43b-ec10-4783-8513-eae299a6a9a0","name":"Browse notifications","object_type":"notification","action_type":"browse","object_id":null,"created_at":"2016-02-02 00:22:25","created_by":1,"updated_at":"2016-02-02 00:22:25","updated_by":1},{"id":6,"uuid":"7b6f0b7d-6d47-4de8-98da-3c06a250dd55","name":"Add notifications","object_type":"notification","action_type":"add","object_id":null,"created_at":"2016-02-02 00:22:25","created_by":1,"updated_at":"2016-02-02 00:22:25","updated_by":1},{"id":7,"uuid":"c1adad54-a501-45c7-b1de-910086e7511b","name":"Delete notifications","object_type":"notification","action_type":"destroy","object_id":null,"created_at":"2016-02-02 00:22:25","created_by":1,"updated_at":"2016-02-02 00:22:25","updated_by":1},{"id":8,"uuid":"94d3f6e2-4e8a-47d1-9811-122e1deb4bf1","name":"Browse posts","object_type":"post","action_type":"browse","object_id":null,"created_at":"2016-02-02 00:22:25","created_by":1,"updated_at":"2016-02-02 00:22:25","updated_by":1},{"id":9,"uuid":"adc8e63c-9523-4651-91d9-f5b94bc69dfb","name":"Read posts","object_type":"post","action_type":"read","object_id":null,"created_at":"2016-02-02 00:22:25","created_by":1,"updated_at":"2016-02-02 00:22:25","updated_by":1},{"id":10,"uuid":"59ff9e3e-5c3b-4d61-87a8-b0b91b4b5704","name":"Edit posts","object_type":"post","action_type":"edit","object_id":null,"created_at":"2016-02-02 00:22:25","created_by":1,"updated_at":"2016-02-02 00:22:25","updated_by":1},{"id":11,"uuid":"485d78da-e6ec-41b0-b4be-08f5b61710aa","name":"Add posts","object_type":"post","action_type":"add","object_id":null,"created_at":"2016-02-02 00:22:25","created_by":1,"updated_at":"2016-02-02 00:22:25","updated_by":1},{"id":12,"uuid":"5e8549b6-eea0-4778-992c-e87cc9cfbe3c","name":"Delete posts","object_type":"post","action_type":"destroy","object_id":null,"created_at":"2016-02-02 00:22:25","created_by":1,"updated_at":"2016-02-02 00:22:25","updated_by":1},{"id":13,"uuid":"bd620130-bb44-44f7-a698-ac169b08e609","name":"Browse settings","object_type":"setting","action_type":"browse","object_id":null,"created_at":"2016-02-02 00:22:25","created_by":1,"updated_at":"2016-02-02 00:22:25","updated_by":1},{"id":14,"uuid":"8b0d112b-dec2-472a-b1d4-db04853aaa03","name":"Read settings","object_type":"setting","action_type":"read","object_id":null,"created_at":"2016-02-02 00:22:25","created_by":1,"updated_at":"2016-02-02 00:22:25","updated_by":1},{"id":15,"uuid":"88486210-cb60-4ed7-ad0c-65a70f8594c6","name":"Edit settings","object_type":"setting","action_type":"edit","object_id":null,"created_at":"2016-02-02 00:22:25","created_by":1,"updated_at":"2016-02-02 00:22:25","updated_by":1},{"id":16,"uuid":"050aa5f9-1c37-4799-a360-b026713ddde9","name":"Generate slugs","object_type":"slug","action_type":"generate","object_id":null,"created_at":"2016-02-02 00:22:25","created_by":1,"updated_at":"2016-02-02 00:22:25","updated_by":1},{"id":17,"uuid":"94f99af5-5cc0-42e4-8532-6dff10f5b3cd","name":"Browse tags","object_type":"tag","action_type":"browse","object_id":null,"created_at":"2016-02-02 00:22:25","created_by":1,"updated_at":"2016-02-02 00:22:25","updated_by":1},{"id":18,"uuid":"0fa02f9b-64a0-49c0-8e63-0ff778f57b77","name":"Read tags","object_type":"tag","action_type":"read","object_id":null,"created_at":"2016-02-02 00:22:25","created_by":1,"updated_at":"2016-02-02 00:22:25","updated_by":1},{"id":19,"uuid":"3c66d23c-1439-4baf-a0e2-55b0122eb232","name":"Edit tags","object_type":"tag","action_type":"edit","object_id":null,"created_at":"2016-02-02 00:22:25","created_by":1,"updated_at":"2016-02-02 00:22:25","updated_by":1},{"id":20,"uuid":"5d85ffa4-221d-44ad-ad5e-1cd4e400c4fb","name":"Add tags","object_type":"tag","action_type":"add","object_id":null,"created_at":"2016-02-02 00:22:25","created_by":1,"updated_at":"2016-02-02 00:22:25","updated_by":1},{"id":21,"uuid":"a4d29200-c4a5-4070-b6b4-2820a8a700e0","name":"Delete tags","object_type":"tag","action_type":"destroy","object_id":null,"created_at":"2016-02-02 00:22:25","created_by":1,"updated_at":"2016-02-02 00:22:25","updated_by":1},{"id":22,"uuid":"90a9d848-a3ea-409a-814c-2a1045758998","name":"Browse themes","object_type":"theme","action_type":"browse","object_id":null,"created_at":"2016-02-02 00:22:25","created_by":1,"updated_at":"2016-02-02 00:22:25","updated_by":1},{"id":23,"uuid":"75145005-2476-4752-8ec0-d82ca202776b","name":"Edit themes","object_type":"theme","action_type":"edit","object_id":null,"created_at":"2016-02-02 00:22:25","created_by":1,"updated_at":"2016-02-02 00:22:25","updated_by":1},{"id":24,"uuid":"eda078c3-b152-40eb-a0d5-86fd05b343d4","name":"Browse users","object_type":"user","action_type":"browse","object_id":null,"created_at":"2016-02-02 00:22:25","created_by":1,"updated_at":"2016-02-02 00:22:25","updated_by":1},{"id":25,"uuid":"6ab589cc-766d-4393-bcab-0fd1db6df516","name":"Read users","object_type":"user","action_type":"read","object_id":null,"created_at":"2016-02-02 00:22:25","created_by":1,"updated_at":"2016-02-02 00:22:25","updated_by":1},{"id":26,"uuid":"b39fca14-636e-4d31-b150-2e0edee647b9","name":"Edit users","object_type":"user","action_type":"edit","object_id":null,"created_at":"2016-02-02 00:22:25","created_by":1,"updated_at":"2016-02-02 00:22:25","updated_by":1},{"id":27,"uuid":"92be680a-1dcc-491b-a573-7b1b91977678","name":"Add users","object_type":"user","action_type":"add","object_id":null,"created_at":"2016-02-02 00:22:25","created_by":1,"updated_at":"2016-02-02 00:22:25","updated_by":1},{"id":28,"uuid":"91fb430e-f813-4e93-a13e-30a84d4b528d","name":"Delete users","object_type":"user","action_type":"destroy","object_id":null,"created_at":"2016-02-02 00:22:25","created_by":1,"updated_at":"2016-02-02 00:22:25","updated_by":1},{"id":29,"uuid":"e9558153-0b77-4f4e-b933-eb5648a485b0","name":"Assign a role","object_type":"role","action_type":"assign","object_id":null,"created_at":"2016-02-02 00:22:25","created_by":1,"updated_at":"2016-02-02 00:22:25","updated_by":1},{"id":30,"uuid":"d9fe0f4f-acf3-4243-8e41-9c6c73327765","name":"Browse roles","object_type":"role","action_type":"browse","object_id":null,"created_at":"2016-02-02 00:22:25","created_by":1,"updated_at":"2016-02-02 00:22:25","updated_by":1},{"id":31,"uuid":"6386dd4c-cc35-4569-b158-b5a3b101bcbd","name":"Browse clients","object_type":"client","action_type":"browse","object_id":null,"created_at":"2016-12-14 19:23:22","created_by":1,"updated_at":"2016-12-14 19:23:22","updated_by":1},{"id":32,"uuid":"ea78f86a-a619-4441-9052-054a367e5e0d","name":"Read clients","object_type":"client","action_type":"read","object_id":null,"created_at":"2016-12-14 19:23:22","created_by":1,"updated_at":"2016-12-14 19:23:22","updated_by":1},{"id":33,"uuid":"8b996859-7732-4146-83ff-ef83deed59e7","name":"Edit clients","object_type":"client","action_type":"edit","object_id":null,"created_at":"2016-12-14 19:23:22","created_by":1,"updated_at":"2016-12-14 19:23:22","updated_by":1},{"id":34,"uuid":"907af7f1-f054-49aa-8341-6dcb841367a6","name":"Add clients","object_type":"client","action_type":"add","object_id":null,"created_at":"2016-12-14 19:23:22","created_by":1,"updated_at":"2016-12-14 19:23:22","updated_by":1},{"id":35,"uuid":"ac3a487d-3e45-4f61-94da-b22af517f593","name":"Delete clients","object_type":"client","action_type":"destroy","object_id":null,"created_at":"2016-12-14 19:23:22","created_by":1,"updated_at":"2016-12-14 19:23:22","updated_by":1},{"id":36,"uuid":"9ad629bb-0cf1-4806-9ae6-a75e53237a80","name":"Browse subscribers","object_type":"subscriber","action_type":"browse","object_id":null,"created_at":"2016-12-14 19:23:23","created_by":1,"updated_at":"2016-12-14 19:23:23","updated_by":1},{"id":37,"uuid":"4374b962-067a-41cf-bae0-5771a0ccdb35","name":"Read subscribers","object_type":"subscriber","action_type":"read","object_id":null,"created_at":"2016-12-14 19:23:23","created_by":1,"updated_at":"2016-12-14 19:23:23","updated_by":1},{"id":38,"uuid":"b07e16dd-59a4-4775-aee9-e426f1db383f","name":"Edit subscribers","object_type":"subscriber","action_type":"edit","object_id":null,"created_at":"2016-12-14 19:23:23","created_by":1,"updated_at":"2016-12-14 19:23:23","updated_by":1},{"id":39,"uuid":"2d8bf2b0-5a5c-4ef5-8ca4-880ea848f3f3","name":"Add subscribers","object_type":"subscriber","action_type":"add","object_id":null,"created_at":"2016-12-14 19:23:23","created_by":1,"updated_at":"2016-12-14 19:23:23","updated_by":1},{"id":40,"uuid":"257ecdbc-1c17-4350-9fda-a07c9c72e26c","name":"Delete subscribers","object_type":"subscriber","action_type":"destroy","object_id":null,"created_at":"2016-12-14 19:23:23","created_by":1,"updated_at":"2016-12-14 19:23:23","updated_by":1},{"id":41,"uuid":"7ca495bf-54b5-4a16-8162-23d7d5510786","name":"Upload themes","object_type":"theme","action_type":"add","object_id":null,"created_at":"2016-12-14 19:23:23","created_by":1,"updated_at":"2016-12-14 19:23:23","updated_by":1},{"id":42,"uuid":"7887db78-a707-4d67-b668-0e26c6b14c38","name":"Download themes","object_type":"theme","action_type":"read","object_id":null,"created_at":"2016-12-14 19:23:23","created_by":1,"updated_at":"2016-12-14 19:23:23","updated_by":1},{"id":43,"uuid":"8adde84b-d339-4970-8535-2f92355df836","name":"Delete themes","object_type":"theme","action_type":"destroy","object_id":null,"created_at":"2016-12-14 19:23:23","created_by":1,"updated_at":"2016-12-14 19:23:23","updated_by":1}],"permissions_users":[],"permissions_roles":[{"id":1,"role_id":1,"permission_id":1},{"id":2,"role_id":1,"permission_id":2},{"id":3,"role_id":1,"permission_id":3},{"id":4,"role_id":1,"permission_id":4},{"id":5,"role_id":1,"permission_id":5},{"id":6,"role_id":1,"permission_id":6},{"id":7,"role_id":1,"permission_id":7},{"id":8,"role_id":1,"permission_id":8},{"id":9,"role_id":1,"permission_id":9},{"id":10,"role_id":1,"permission_id":10},{"id":11,"role_id":1,"permission_id":11},{"id":12,"role_id":1,"permission_id":12},{"id":13,"role_id":1,"permission_id":13},{"id":14,"role_id":1,"permission_id":14},{"id":15,"role_id":1,"permission_id":15},{"id":16,"role_id":1,"permission_id":16},{"id":17,"role_id":1,"permission_id":17},{"id":18,"role_id":1,"permission_id":18},{"id":19,"role_id":1,"permission_id":19},{"id":20,"role_id":1,"permission_id":20},{"id":21,"role_id":1,"permission_id":21},{"id":22,"role_id":1,"permission_id":22},{"id":23,"role_id":1,"permission_id":23},{"id":24,"role_id":1,"permission_id":24},{"id":25,"role_id":1,"permission_id":25},{"id":26,"role_id":1,"permission_id":26},{"id":27,"role_id":1,"permission_id":27},{"id":28,"role_id":1,"permission_id":28},{"id":29,"role_id":1,"permission_id":29},{"id":30,"role_id":1,"permission_id":30},{"id":31,"role_id":2,"permission_id":8},{"id":32,"role_id":2,"permission_id":9},{"id":33,"role_id":2,"permission_id":10},{"id":34,"role_id":2,"permission_id":11},{"id":35,"role_id":2,"permission_id":12},{"id":36,"role_id":2,"permission_id":13},{"id":37,"role_id":2,"permission_id":14},{"id":38,"role_id":2,"permission_id":16},{"id":39,"role_id":2,"permission_id":17},{"id":40,"role_id":2,"permission_id":18},{"id":41,"role_id":2,"permission_id":19},{"id":42,"role_id":2,"permission_id":20},{"id":43,"role_id":2,"permission_id":21},{"id":44,"role_id":2,"permission_id":24},{"id":45,"role_id":2,"permission_id":25},{"id":46,"role_id":2,"permission_id":26},{"id":47,"role_id":2,"permission_id":27},{"id":48,"role_id":2,"permission_id":28},{"id":49,"role_id":2,"permission_id":29},{"id":50,"role_id":2,"permission_id":30},{"id":51,"role_id":3,"permission_id":8},{"id":52,"role_id":3,"permission_id":9},{"id":53,"role_id":3,"permission_id":11},{"id":54,"role_id":3,"permission_id":13},{"id":55,"role_id":3,"permission_id":14},{"id":56,"role_id":3,"permission_id":16},{"id":57,"role_id":3,"permission_id":17},{"id":58,"role_id":3,"permission_id":18},{"id":59,"role_id":3,"permission_id":20},{"id":60,"role_id":3,"permission_id":24},{"id":61,"role_id":3,"permission_id":25},{"id":62,"role_id":3,"permission_id":30},{"id":63,"role_id":1,"permission_id":31},{"id":64,"role_id":1,"permission_id":32},{"id":65,"role_id":1,"permission_id":33},{"id":66,"role_id":1,"permission_id":34},{"id":67,"role_id":1,"permission_id":35},{"id":68,"role_id":2,"permission_id":31},{"id":69,"role_id":2,"permission_id":32},{"id":70,"role_id":2,"permission_id":33},{"id":71,"role_id":2,"permission_id":34},{"id":72,"role_id":2,"permission_id":35},{"id":73,"role_id":3,"permission_id":31},{"id":74,"role_id":3,"permission_id":32},{"id":75,"role_id":3,"permission_id":33},{"id":76,"role_id":3,"permission_id":34},{"id":77,"role_id":3,"permission_id":35},{"id":78,"role_id":1,"permission_id":36},{"id":79,"role_id":1,"permission_id":37},{"id":80,"role_id":1,"permission_id":38},{"id":81,"role_id":1,"permission_id":39},{"id":82,"role_id":1,"permission_id":40},{"id":83,"role_id":2,"permission_id":39},{"id":84,"role_id":3,"permission_id":39},{"id":85,"role_id":1,"permission_id":41},{"id":86,"role_id":1,"permission_id":42},{"id":87,"role_id":1,"permission_id":43}],"permissions_apps":[],"settings":[{"id":1,"uuid":"ba19f88e-7d9a-4b5b-88bb-cf152ddc0712","key":"databaseVersion","value":"009","type":"core","created_at":"2016-02-02 00:22:26","created_by":1,"updated_at":"2016-12-14 19:23:23","updated_by":1},{"id":2,"uuid":"620802af-660c-41c3-917a-f37977dc490e","key":"dbHash","value":"f9fbb48c-3e91-46df-9100-e9d3681d8601","type":"core","created_at":"2016-02-02 00:22:26","created_by":1,"updated_at":"2016-12-14 19:23:23","updated_by":1},{"id":3,"uuid":"f2a1eb3a-9f08-4896-9254-e557bfd4ea8b","key":"nextUpdateCheck","value":"1628365149","type":"core","created_at":"2016-02-02 00:22:26","created_by":1,"updated_at":"2021-08-06 19:37:45","updated_by":1},{"id":4,"uuid":"0be2ba32-855e-4ace-9014-80bbe26fc9c9","key":"displayUpdateNotification","value":"0.11.14","type":"core","created_at":"2016-02-02 00:22:26","created_by":1,"updated_at":"2021-08-06 19:37:45","updated_by":1},{"id":5,"uuid":"030ff3dd-5817-4d07-901b-e6723b5b0245","key":"title","value":"Seb Insua","type":"blog","created_at":"2016-02-02 00:22:26","created_by":1,"updated_at":"2017-04-25 18:04:17","updated_by":1},{"id":6,"uuid":"bfaa7852-cdab-4c52-a627-d8d6c0e98577","key":"description","value":"Thoughtful.","type":"blog","created_at":"2016-02-02 00:22:26","created_by":1,"updated_at":"2017-04-25 18:04:17","updated_by":1},{"id":7,"uuid":"f9f541f4-fc76-4fda-9d18-24e20477aa3f","key":"logo","value":"","type":"blog","created_at":"2016-02-02 00:22:26","created_by":1,"updated_at":"2017-04-25 18:04:17","updated_by":1},{"id":8,"uuid":"3e1e4315-918a-4e86-8876-5d0ff26be92c","key":"cover","value":"","type":"blog","created_at":"2016-02-02 00:22:26","created_by":1,"updated_at":"2017-04-25 18:04:17","updated_by":1},{"id":9,"uuid":"1fa95806-9b0a-4bd6-bae8-38ca8534fb6e","key":"defaultLang","value":"en_US","type":"blog","created_at":"2016-02-02 00:22:26","created_by":1,"updated_at":"2017-04-25 18:04:17","updated_by":1},{"id":10,"uuid":"f9dd7c89-c138-4019-a054-331d64bb0485","key":"postsPerPage","value":"1","type":"blog","created_at":"2016-02-02 00:22:26","created_by":1,"updated_at":"2017-04-25 18:04:17","updated_by":1},{"id":11,"uuid":"9c4bc047-b12c-4879-800f-0dac765ae69c","key":"forceI18n","value":"true","type":"blog","created_at":"2016-02-02 00:22:26","created_by":1,"updated_at":"2017-04-25 18:04:17","updated_by":1},{"id":12,"uuid":"0083297e-07ee-4896-84da-a59ca9806196","key":"permalinks","value":"/:slug/","type":"blog","created_at":"2016-02-02 00:22:26","created_by":1,"updated_at":"2017-04-25 18:04:17","updated_by":1},{"id":13,"uuid":"b950c64e-7574-4326-86c1-160da70108ae","key":"ghost_head","value":"<link href=\"https://cdnjs.cloudflare.com/ajax/libs/prism/1.6.0/themes/prism.min.css\" rel=\"stylesheet\" />\n<script>\n  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){\n  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),\n  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)\n  })(window,document,'script','https://www.google-analytics.com/analytics.js','ga');\n\n  ga('create', 'UA-28009877-1', 'auto');\n  ga('send', 'pageview');\n\n</script>","type":"blog","created_at":"2016-02-02 00:22:26","created_by":1,"updated_at":"2017-04-25 18:04:17","updated_by":1},{"id":14,"uuid":"aa0a09fb-a900-4e83-955b-b4d43c4696c1","key":"ghost_foot","value":"<script src=\"https://cdnjs.cloudflare.com/ajax/libs/prism/1.6.0/prism.min.js\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/prism/1.6.0/components/prism-rust.min.js\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/prism/1.6.0/components/prism-javascript.min.js\"></script>\n<script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>","type":"blog","created_at":"2016-02-02 00:22:26","created_by":1,"updated_at":"2017-04-25 18:04:17","updated_by":1},{"id":15,"uuid":"21c2f86c-2757-42d7-811c-36461372942a","key":"labs","value":"{}","type":"blog","created_at":"2016-02-02 00:22:26","created_by":1,"updated_at":"2017-04-25 18:04:17","updated_by":1},{"id":16,"uuid":"df89e9d6-d03c-4419-963f-384c54622b17","key":"navigation","value":"[{\"label\":\"GitHub\",\"url\":\"http://github.com/sebinsua\"},{\"label\":\"@sebinsua\",\"url\":\"http://twitter.com/sebinsua\"},{\"label\":\"~\",\"url\":\"http://hire.duplo.tech\"},{\"label\":\"←\",\"url\":\"http://sebinsua.com\"}]","type":"blog","created_at":"2016-02-02 00:22:26","created_by":1,"updated_at":"2017-04-25 18:04:17","updated_by":1},{"id":17,"uuid":"d189f1c6-554a-4896-9b9a-ebe281c36cec","key":"activeApps","value":"[]","type":"app","created_at":"2016-02-02 00:22:26","created_by":1,"updated_at":"2016-12-14 19:23:23","updated_by":1},{"id":18,"uuid":"1f17d55c-005a-4162-8bf7-d81947b6ee45","key":"installedApps","value":"[]","type":"app","created_at":"2016-02-02 00:22:26","created_by":1,"updated_at":"2019-11-01 23:15:53","updated_by":1},{"id":19,"uuid":"7a3e6027-dda6-4d3e-a3e3-8b123b86eb0a","key":"isPrivate","value":"false","type":"private","created_at":"2016-02-02 00:22:26","created_by":1,"updated_at":"2017-04-25 18:04:17","updated_by":1},{"id":20,"uuid":"c0be14f8-7888-4813-92e4-903f1d4744b5","key":"password","value":"null","type":"private","created_at":"2016-02-02 00:22:26","created_by":1,"updated_at":"2017-04-25 18:04:17","updated_by":1},{"id":21,"uuid":"0ab872cb-9153-4b9d-8a3e-12b77e5b06c1","key":"activeTheme","value":"breathe","type":"theme","created_at":"2016-02-02 00:22:26","created_by":1,"updated_at":"2017-04-25 18:04:17","updated_by":1},{"id":22,"uuid":"91da225f-8cbf-49d2-85e7-822e7816751d","key":"seenNotifications","value":"[]","type":"core","created_at":"2016-12-14 19:23:22","created_by":1,"updated_at":"2016-12-14 19:23:23","updated_by":1},{"id":23,"uuid":"6848fcb8-ab58-4d09-ad65-3bb255973901","key":"migrations","value":"{\"006/01\":\"2016-12-14T19:23:23Z\"}","type":"core","created_at":"2016-12-14 19:23:22","created_by":1,"updated_at":"2016-12-14 19:23:23","updated_by":1},{"id":24,"uuid":"da7ed100-7960-4021-b61a-3c4b6c93cfc3","key":"activeTimezone","value":"Europe/Dublin","type":"blog","created_at":"2016-12-14 19:23:22","created_by":1,"updated_at":"2017-04-25 18:04:17","updated_by":1},{"id":25,"uuid":"26af3280-5292-45d7-9fd7-543203b4cff0","key":"facebook","value":"heyseb","type":"blog","created_at":"2016-12-14 19:23:22","created_by":1,"updated_at":"2017-04-25 18:04:17","updated_by":1},{"id":26,"uuid":"7af2b2a6-90cf-41bb-a660-e6f4a98ba7d7","key":"twitter","value":"@sebinsua","type":"blog","created_at":"2016-12-14 19:23:22","created_by":1,"updated_at":"2017-04-25 18:04:17","updated_by":1},{"id":27,"uuid":"b49e2751-61e5-4190-9609-03478657676a","key":"slack","value":"[{\"url\":\"\"}]","type":"blog","created_at":"2016-12-14 19:23:22","created_by":1,"updated_at":"2017-04-25 18:04:17","updated_by":1}],"posts_tags":[],"apps":[],"app_settings":[],"app_fields":[],"tags":[],"subscribers":[]}}]}